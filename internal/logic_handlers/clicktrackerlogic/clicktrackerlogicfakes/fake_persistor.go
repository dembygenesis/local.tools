// Code generated by counterfeiter. DO NOT EDIT.
package clicktrackerlogicfakes

import (
	"context"
	"sync"

	"github.com/dembygenesis/local.tools/internal/model"
	"github.com/dembygenesis/local.tools/internal/persistence"
)

type FakePersistor struct {
	CreateClickTrackerStub        func(context.Context, persistence.TransactionHandler, *model.ClickTracker) (*model.ClickTracker, error)
	createClickTrackerMutex       sync.RWMutex
	createClickTrackerArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.ClickTracker
	}
	createClickTrackerReturns struct {
		result1 *model.ClickTracker
		result2 error
	}
	createClickTrackerReturnsOnCall map[int]struct {
		result1 *model.ClickTracker
		result2 error
	}
	DeleteClickTrackerStub        func(context.Context, persistence.TransactionHandler, int) error
	deleteClickTrackerMutex       sync.RWMutex
	deleteClickTrackerArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}
	deleteClickTrackerReturns struct {
		result1 error
	}
	deleteClickTrackerReturnsOnCall map[int]struct {
		result1 error
	}
	GetClickTrackerByIdStub        func(context.Context, persistence.TransactionHandler, int) (*model.ClickTracker, error)
	getClickTrackerByIdMutex       sync.RWMutex
	getClickTrackerByIdArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}
	getClickTrackerByIdReturns struct {
		result1 *model.ClickTracker
		result2 error
	}
	getClickTrackerByIdReturnsOnCall map[int]struct {
		result1 *model.ClickTracker
		result2 error
	}
	GetClickTrackerByNameStub        func(context.Context, persistence.TransactionHandler, string) (*model.ClickTracker, error)
	getClickTrackerByNameMutex       sync.RWMutex
	getClickTrackerByNameArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 string
	}
	getClickTrackerByNameReturns struct {
		result1 *model.ClickTracker
		result2 error
	}
	getClickTrackerByNameReturnsOnCall map[int]struct {
		result1 *model.ClickTracker
		result2 error
	}
	GetClickTrackerSetByIdStub        func(context.Context, persistence.TransactionHandler, int) (*model.ClickTrackerSet, error)
	getClickTrackerSetByIdMutex       sync.RWMutex
	getClickTrackerSetByIdArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}
	getClickTrackerSetByIdReturns struct {
		result1 *model.ClickTrackerSet
		result2 error
	}
	getClickTrackerSetByIdReturnsOnCall map[int]struct {
		result1 *model.ClickTrackerSet
		result2 error
	}
	GetClickTrackersStub        func(context.Context, persistence.TransactionHandler, *model.ClickTrackerFilters) (*model.PaginatedClickTrackers, error)
	getClickTrackersMutex       sync.RWMutex
	getClickTrackersArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.ClickTrackerFilters
	}
	getClickTrackersReturns struct {
		result1 *model.PaginatedClickTrackers
		result2 error
	}
	getClickTrackersReturnsOnCall map[int]struct {
		result1 *model.PaginatedClickTrackers
		result2 error
	}
	RestoreClickTrackerStub        func(context.Context, persistence.TransactionHandler, int) error
	restoreClickTrackerMutex       sync.RWMutex
	restoreClickTrackerArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}
	restoreClickTrackerReturns struct {
		result1 error
	}
	restoreClickTrackerReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateClickTrackersStub        func(context.Context, persistence.TransactionHandler, *model.UpdateClickTracker) (*model.ClickTracker, error)
	updateClickTrackersMutex       sync.RWMutex
	updateClickTrackersArgsForCall []struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.UpdateClickTracker
	}
	updateClickTrackersReturns struct {
		result1 *model.ClickTracker
		result2 error
	}
	updateClickTrackersReturnsOnCall map[int]struct {
		result1 *model.ClickTracker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePersistor) CreateClickTracker(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 *model.ClickTracker) (*model.ClickTracker, error) {
	fake.createClickTrackerMutex.Lock()
	ret, specificReturn := fake.createClickTrackerReturnsOnCall[len(fake.createClickTrackerArgsForCall)]
	fake.createClickTrackerArgsForCall = append(fake.createClickTrackerArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.ClickTracker
	}{arg1, arg2, arg3})
	stub := fake.CreateClickTrackerStub
	fakeReturns := fake.createClickTrackerReturns
	fake.recordInvocation("CreateClickTracker", []interface{}{arg1, arg2, arg3})
	fake.createClickTrackerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistor) CreateClickTrackerCallCount() int {
	fake.createClickTrackerMutex.RLock()
	defer fake.createClickTrackerMutex.RUnlock()
	return len(fake.createClickTrackerArgsForCall)
}

func (fake *FakePersistor) CreateClickTrackerCalls(stub func(context.Context, persistence.TransactionHandler, *model.ClickTracker) (*model.ClickTracker, error)) {
	fake.createClickTrackerMutex.Lock()
	defer fake.createClickTrackerMutex.Unlock()
	fake.CreateClickTrackerStub = stub
}

func (fake *FakePersistor) CreateClickTrackerArgsForCall(i int) (context.Context, persistence.TransactionHandler, *model.ClickTracker) {
	fake.createClickTrackerMutex.RLock()
	defer fake.createClickTrackerMutex.RUnlock()
	argsForCall := fake.createClickTrackerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) CreateClickTrackerReturns(result1 *model.ClickTracker, result2 error) {
	fake.createClickTrackerMutex.Lock()
	defer fake.createClickTrackerMutex.Unlock()
	fake.CreateClickTrackerStub = nil
	fake.createClickTrackerReturns = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) CreateClickTrackerReturnsOnCall(i int, result1 *model.ClickTracker, result2 error) {
	fake.createClickTrackerMutex.Lock()
	defer fake.createClickTrackerMutex.Unlock()
	fake.CreateClickTrackerStub = nil
	if fake.createClickTrackerReturnsOnCall == nil {
		fake.createClickTrackerReturnsOnCall = make(map[int]struct {
			result1 *model.ClickTracker
			result2 error
		})
	}
	fake.createClickTrackerReturnsOnCall[i] = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) DeleteClickTracker(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 int) error {
	fake.deleteClickTrackerMutex.Lock()
	ret, specificReturn := fake.deleteClickTrackerReturnsOnCall[len(fake.deleteClickTrackerArgsForCall)]
	fake.deleteClickTrackerArgsForCall = append(fake.deleteClickTrackerArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.DeleteClickTrackerStub
	fakeReturns := fake.deleteClickTrackerReturns
	fake.recordInvocation("DeleteClickTracker", []interface{}{arg1, arg2, arg3})
	fake.deleteClickTrackerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistor) DeleteClickTrackerCallCount() int {
	fake.deleteClickTrackerMutex.RLock()
	defer fake.deleteClickTrackerMutex.RUnlock()
	return len(fake.deleteClickTrackerArgsForCall)
}

func (fake *FakePersistor) DeleteClickTrackerCalls(stub func(context.Context, persistence.TransactionHandler, int) error) {
	fake.deleteClickTrackerMutex.Lock()
	defer fake.deleteClickTrackerMutex.Unlock()
	fake.DeleteClickTrackerStub = stub
}

func (fake *FakePersistor) DeleteClickTrackerArgsForCall(i int) (context.Context, persistence.TransactionHandler, int) {
	fake.deleteClickTrackerMutex.RLock()
	defer fake.deleteClickTrackerMutex.RUnlock()
	argsForCall := fake.deleteClickTrackerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) DeleteClickTrackerReturns(result1 error) {
	fake.deleteClickTrackerMutex.Lock()
	defer fake.deleteClickTrackerMutex.Unlock()
	fake.DeleteClickTrackerStub = nil
	fake.deleteClickTrackerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistor) DeleteClickTrackerReturnsOnCall(i int, result1 error) {
	fake.deleteClickTrackerMutex.Lock()
	defer fake.deleteClickTrackerMutex.Unlock()
	fake.DeleteClickTrackerStub = nil
	if fake.deleteClickTrackerReturnsOnCall == nil {
		fake.deleteClickTrackerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteClickTrackerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistor) GetClickTrackerById(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 int) (*model.ClickTracker, error) {
	fake.getClickTrackerByIdMutex.Lock()
	ret, specificReturn := fake.getClickTrackerByIdReturnsOnCall[len(fake.getClickTrackerByIdArgsForCall)]
	fake.getClickTrackerByIdArgsForCall = append(fake.getClickTrackerByIdArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.GetClickTrackerByIdStub
	fakeReturns := fake.getClickTrackerByIdReturns
	fake.recordInvocation("GetClickTrackerById", []interface{}{arg1, arg2, arg3})
	fake.getClickTrackerByIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistor) GetClickTrackerByIdCallCount() int {
	fake.getClickTrackerByIdMutex.RLock()
	defer fake.getClickTrackerByIdMutex.RUnlock()
	return len(fake.getClickTrackerByIdArgsForCall)
}

func (fake *FakePersistor) GetClickTrackerByIdCalls(stub func(context.Context, persistence.TransactionHandler, int) (*model.ClickTracker, error)) {
	fake.getClickTrackerByIdMutex.Lock()
	defer fake.getClickTrackerByIdMutex.Unlock()
	fake.GetClickTrackerByIdStub = stub
}

func (fake *FakePersistor) GetClickTrackerByIdArgsForCall(i int) (context.Context, persistence.TransactionHandler, int) {
	fake.getClickTrackerByIdMutex.RLock()
	defer fake.getClickTrackerByIdMutex.RUnlock()
	argsForCall := fake.getClickTrackerByIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) GetClickTrackerByIdReturns(result1 *model.ClickTracker, result2 error) {
	fake.getClickTrackerByIdMutex.Lock()
	defer fake.getClickTrackerByIdMutex.Unlock()
	fake.GetClickTrackerByIdStub = nil
	fake.getClickTrackerByIdReturns = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) GetClickTrackerByIdReturnsOnCall(i int, result1 *model.ClickTracker, result2 error) {
	fake.getClickTrackerByIdMutex.Lock()
	defer fake.getClickTrackerByIdMutex.Unlock()
	fake.GetClickTrackerByIdStub = nil
	if fake.getClickTrackerByIdReturnsOnCall == nil {
		fake.getClickTrackerByIdReturnsOnCall = make(map[int]struct {
			result1 *model.ClickTracker
			result2 error
		})
	}
	fake.getClickTrackerByIdReturnsOnCall[i] = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) GetClickTrackerByName(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 string) (*model.ClickTracker, error) {
	fake.getClickTrackerByNameMutex.Lock()
	ret, specificReturn := fake.getClickTrackerByNameReturnsOnCall[len(fake.getClickTrackerByNameArgsForCall)]
	fake.getClickTrackerByNameArgsForCall = append(fake.getClickTrackerByNameArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.GetClickTrackerByNameStub
	fakeReturns := fake.getClickTrackerByNameReturns
	fake.recordInvocation("GetClickTrackerByName", []interface{}{arg1, arg2, arg3})
	fake.getClickTrackerByNameMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistor) GetClickTrackerByNameCallCount() int {
	fake.getClickTrackerByNameMutex.RLock()
	defer fake.getClickTrackerByNameMutex.RUnlock()
	return len(fake.getClickTrackerByNameArgsForCall)
}

func (fake *FakePersistor) GetClickTrackerByNameCalls(stub func(context.Context, persistence.TransactionHandler, string) (*model.ClickTracker, error)) {
	fake.getClickTrackerByNameMutex.Lock()
	defer fake.getClickTrackerByNameMutex.Unlock()
	fake.GetClickTrackerByNameStub = stub
}

func (fake *FakePersistor) GetClickTrackerByNameArgsForCall(i int) (context.Context, persistence.TransactionHandler, string) {
	fake.getClickTrackerByNameMutex.RLock()
	defer fake.getClickTrackerByNameMutex.RUnlock()
	argsForCall := fake.getClickTrackerByNameArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) GetClickTrackerByNameReturns(result1 *model.ClickTracker, result2 error) {
	fake.getClickTrackerByNameMutex.Lock()
	defer fake.getClickTrackerByNameMutex.Unlock()
	fake.GetClickTrackerByNameStub = nil
	fake.getClickTrackerByNameReturns = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) GetClickTrackerByNameReturnsOnCall(i int, result1 *model.ClickTracker, result2 error) {
	fake.getClickTrackerByNameMutex.Lock()
	defer fake.getClickTrackerByNameMutex.Unlock()
	fake.GetClickTrackerByNameStub = nil
	if fake.getClickTrackerByNameReturnsOnCall == nil {
		fake.getClickTrackerByNameReturnsOnCall = make(map[int]struct {
			result1 *model.ClickTracker
			result2 error
		})
	}
	fake.getClickTrackerByNameReturnsOnCall[i] = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) GetClickTrackerSetById(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 int) (*model.ClickTrackerSet, error) {
	fake.getClickTrackerSetByIdMutex.Lock()
	ret, specificReturn := fake.getClickTrackerSetByIdReturnsOnCall[len(fake.getClickTrackerSetByIdArgsForCall)]
	fake.getClickTrackerSetByIdArgsForCall = append(fake.getClickTrackerSetByIdArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.GetClickTrackerSetByIdStub
	fakeReturns := fake.getClickTrackerSetByIdReturns
	fake.recordInvocation("GetClickTrackerSetById", []interface{}{arg1, arg2, arg3})
	fake.getClickTrackerSetByIdMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistor) GetClickTrackerSetByIdCallCount() int {
	fake.getClickTrackerSetByIdMutex.RLock()
	defer fake.getClickTrackerSetByIdMutex.RUnlock()
	return len(fake.getClickTrackerSetByIdArgsForCall)
}

func (fake *FakePersistor) GetClickTrackerSetByIdCalls(stub func(context.Context, persistence.TransactionHandler, int) (*model.ClickTrackerSet, error)) {
	fake.getClickTrackerSetByIdMutex.Lock()
	defer fake.getClickTrackerSetByIdMutex.Unlock()
	fake.GetClickTrackerSetByIdStub = stub
}

func (fake *FakePersistor) GetClickTrackerSetByIdArgsForCall(i int) (context.Context, persistence.TransactionHandler, int) {
	fake.getClickTrackerSetByIdMutex.RLock()
	defer fake.getClickTrackerSetByIdMutex.RUnlock()
	argsForCall := fake.getClickTrackerSetByIdArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) GetClickTrackerSetByIdReturns(result1 *model.ClickTrackerSet, result2 error) {
	fake.getClickTrackerSetByIdMutex.Lock()
	defer fake.getClickTrackerSetByIdMutex.Unlock()
	fake.GetClickTrackerSetByIdStub = nil
	fake.getClickTrackerSetByIdReturns = struct {
		result1 *model.ClickTrackerSet
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) GetClickTrackerSetByIdReturnsOnCall(i int, result1 *model.ClickTrackerSet, result2 error) {
	fake.getClickTrackerSetByIdMutex.Lock()
	defer fake.getClickTrackerSetByIdMutex.Unlock()
	fake.GetClickTrackerSetByIdStub = nil
	if fake.getClickTrackerSetByIdReturnsOnCall == nil {
		fake.getClickTrackerSetByIdReturnsOnCall = make(map[int]struct {
			result1 *model.ClickTrackerSet
			result2 error
		})
	}
	fake.getClickTrackerSetByIdReturnsOnCall[i] = struct {
		result1 *model.ClickTrackerSet
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) GetClickTrackers(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 *model.ClickTrackerFilters) (*model.PaginatedClickTrackers, error) {
	fake.getClickTrackersMutex.Lock()
	ret, specificReturn := fake.getClickTrackersReturnsOnCall[len(fake.getClickTrackersArgsForCall)]
	fake.getClickTrackersArgsForCall = append(fake.getClickTrackersArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.ClickTrackerFilters
	}{arg1, arg2, arg3})
	stub := fake.GetClickTrackersStub
	fakeReturns := fake.getClickTrackersReturns
	fake.recordInvocation("GetClickTrackers", []interface{}{arg1, arg2, arg3})
	fake.getClickTrackersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistor) GetClickTrackersCallCount() int {
	fake.getClickTrackersMutex.RLock()
	defer fake.getClickTrackersMutex.RUnlock()
	return len(fake.getClickTrackersArgsForCall)
}

func (fake *FakePersistor) GetClickTrackersCalls(stub func(context.Context, persistence.TransactionHandler, *model.ClickTrackerFilters) (*model.PaginatedClickTrackers, error)) {
	fake.getClickTrackersMutex.Lock()
	defer fake.getClickTrackersMutex.Unlock()
	fake.GetClickTrackersStub = stub
}

func (fake *FakePersistor) GetClickTrackersArgsForCall(i int) (context.Context, persistence.TransactionHandler, *model.ClickTrackerFilters) {
	fake.getClickTrackersMutex.RLock()
	defer fake.getClickTrackersMutex.RUnlock()
	argsForCall := fake.getClickTrackersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) GetClickTrackersReturns(result1 *model.PaginatedClickTrackers, result2 error) {
	fake.getClickTrackersMutex.Lock()
	defer fake.getClickTrackersMutex.Unlock()
	fake.GetClickTrackersStub = nil
	fake.getClickTrackersReturns = struct {
		result1 *model.PaginatedClickTrackers
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) GetClickTrackersReturnsOnCall(i int, result1 *model.PaginatedClickTrackers, result2 error) {
	fake.getClickTrackersMutex.Lock()
	defer fake.getClickTrackersMutex.Unlock()
	fake.GetClickTrackersStub = nil
	if fake.getClickTrackersReturnsOnCall == nil {
		fake.getClickTrackersReturnsOnCall = make(map[int]struct {
			result1 *model.PaginatedClickTrackers
			result2 error
		})
	}
	fake.getClickTrackersReturnsOnCall[i] = struct {
		result1 *model.PaginatedClickTrackers
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) RestoreClickTracker(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 int) error {
	fake.restoreClickTrackerMutex.Lock()
	ret, specificReturn := fake.restoreClickTrackerReturnsOnCall[len(fake.restoreClickTrackerArgsForCall)]
	fake.restoreClickTrackerArgsForCall = append(fake.restoreClickTrackerArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 int
	}{arg1, arg2, arg3})
	stub := fake.RestoreClickTrackerStub
	fakeReturns := fake.restoreClickTrackerReturns
	fake.recordInvocation("RestoreClickTracker", []interface{}{arg1, arg2, arg3})
	fake.restoreClickTrackerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePersistor) RestoreClickTrackerCallCount() int {
	fake.restoreClickTrackerMutex.RLock()
	defer fake.restoreClickTrackerMutex.RUnlock()
	return len(fake.restoreClickTrackerArgsForCall)
}

func (fake *FakePersistor) RestoreClickTrackerCalls(stub func(context.Context, persistence.TransactionHandler, int) error) {
	fake.restoreClickTrackerMutex.Lock()
	defer fake.restoreClickTrackerMutex.Unlock()
	fake.RestoreClickTrackerStub = stub
}

func (fake *FakePersistor) RestoreClickTrackerArgsForCall(i int) (context.Context, persistence.TransactionHandler, int) {
	fake.restoreClickTrackerMutex.RLock()
	defer fake.restoreClickTrackerMutex.RUnlock()
	argsForCall := fake.restoreClickTrackerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) RestoreClickTrackerReturns(result1 error) {
	fake.restoreClickTrackerMutex.Lock()
	defer fake.restoreClickTrackerMutex.Unlock()
	fake.RestoreClickTrackerStub = nil
	fake.restoreClickTrackerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistor) RestoreClickTrackerReturnsOnCall(i int, result1 error) {
	fake.restoreClickTrackerMutex.Lock()
	defer fake.restoreClickTrackerMutex.Unlock()
	fake.RestoreClickTrackerStub = nil
	if fake.restoreClickTrackerReturnsOnCall == nil {
		fake.restoreClickTrackerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.restoreClickTrackerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePersistor) UpdateClickTrackers(arg1 context.Context, arg2 persistence.TransactionHandler, arg3 *model.UpdateClickTracker) (*model.ClickTracker, error) {
	fake.updateClickTrackersMutex.Lock()
	ret, specificReturn := fake.updateClickTrackersReturnsOnCall[len(fake.updateClickTrackersArgsForCall)]
	fake.updateClickTrackersArgsForCall = append(fake.updateClickTrackersArgsForCall, struct {
		arg1 context.Context
		arg2 persistence.TransactionHandler
		arg3 *model.UpdateClickTracker
	}{arg1, arg2, arg3})
	stub := fake.UpdateClickTrackersStub
	fakeReturns := fake.updateClickTrackersReturns
	fake.recordInvocation("UpdateClickTrackers", []interface{}{arg1, arg2, arg3})
	fake.updateClickTrackersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakePersistor) UpdateClickTrackersCallCount() int {
	fake.updateClickTrackersMutex.RLock()
	defer fake.updateClickTrackersMutex.RUnlock()
	return len(fake.updateClickTrackersArgsForCall)
}

func (fake *FakePersistor) UpdateClickTrackersCalls(stub func(context.Context, persistence.TransactionHandler, *model.UpdateClickTracker) (*model.ClickTracker, error)) {
	fake.updateClickTrackersMutex.Lock()
	defer fake.updateClickTrackersMutex.Unlock()
	fake.UpdateClickTrackersStub = stub
}

func (fake *FakePersistor) UpdateClickTrackersArgsForCall(i int) (context.Context, persistence.TransactionHandler, *model.UpdateClickTracker) {
	fake.updateClickTrackersMutex.RLock()
	defer fake.updateClickTrackersMutex.RUnlock()
	argsForCall := fake.updateClickTrackersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakePersistor) UpdateClickTrackersReturns(result1 *model.ClickTracker, result2 error) {
	fake.updateClickTrackersMutex.Lock()
	defer fake.updateClickTrackersMutex.Unlock()
	fake.UpdateClickTrackersStub = nil
	fake.updateClickTrackersReturns = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) UpdateClickTrackersReturnsOnCall(i int, result1 *model.ClickTracker, result2 error) {
	fake.updateClickTrackersMutex.Lock()
	defer fake.updateClickTrackersMutex.Unlock()
	fake.UpdateClickTrackersStub = nil
	if fake.updateClickTrackersReturnsOnCall == nil {
		fake.updateClickTrackersReturnsOnCall = make(map[int]struct {
			result1 *model.ClickTracker
			result2 error
		})
	}
	fake.updateClickTrackersReturnsOnCall[i] = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakePersistor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createClickTrackerMutex.RLock()
	defer fake.createClickTrackerMutex.RUnlock()
	fake.deleteClickTrackerMutex.RLock()
	defer fake.deleteClickTrackerMutex.RUnlock()
	fake.getClickTrackerByIdMutex.RLock()
	defer fake.getClickTrackerByIdMutex.RUnlock()
	fake.getClickTrackerByNameMutex.RLock()
	defer fake.getClickTrackerByNameMutex.RUnlock()
	fake.getClickTrackerSetByIdMutex.RLock()
	defer fake.getClickTrackerSetByIdMutex.RUnlock()
	fake.getClickTrackersMutex.RLock()
	defer fake.getClickTrackersMutex.RUnlock()
	fake.restoreClickTrackerMutex.RLock()
	defer fake.restoreClickTrackerMutex.RUnlock()
	fake.updateClickTrackersMutex.RLock()
	defer fake.updateClickTrackersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePersistor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
