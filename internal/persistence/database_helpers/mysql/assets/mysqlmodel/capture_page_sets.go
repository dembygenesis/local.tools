// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysqlmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// CapturePageSet is an object representing the database table.
type CapturePageSet struct {
	ID                      int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name                    string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	URLName                 string    `boil:"url_name" json:"url_name" toml:"url_name" yaml:"url_name"`
	CreatedBy               null.Int  `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	UpdatedBy               null.Int  `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`
	OrganizationID          null.Int  `boil:"organization_id" json:"organization_id,omitempty" toml:"organization_id" yaml:"organization_id,omitempty"`
	SwitchDurationInMinutes int       `boil:"switch_duration_in_minutes" json:"switch_duration_in_minutes" toml:"switch_duration_in_minutes" yaml:"switch_duration_in_minutes"`
	CreatedAt               null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt               null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	// Processed by worker queue
	AnalyticsNumberOfForms null.Int `boil:"analytics_number_of_forms" json:"analytics_number_of_forms,omitempty" toml:"analytics_number_of_forms" yaml:"analytics_number_of_forms,omitempty"`
	// Processed by worker queue
	AnalyticsImpressions null.Int `boil:"analytics_impressions" json:"analytics_impressions,omitempty" toml:"analytics_impressions" yaml:"analytics_impressions,omitempty"`
	// Processed by worker queue
	AnalyticsSubmissions   null.Int  `boil:"analytics_submissions" json:"analytics_submissions,omitempty" toml:"analytics_submissions" yaml:"analytics_submissions,omitempty"`
	AnalyticsLastUpdatedAt null.Time `boil:"analytics_last_updated_at" json:"analytics_last_updated_at,omitempty" toml:"analytics_last_updated_at" yaml:"analytics_last_updated_at,omitempty"`

	R *capturePageSetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L capturePageSetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CapturePageSetColumns = struct {
	ID                      string
	Name                    string
	URLName                 string
	CreatedBy               string
	UpdatedBy               string
	OrganizationID          string
	SwitchDurationInMinutes string
	CreatedAt               string
	UpdatedAt               string
	AnalyticsNumberOfForms  string
	AnalyticsImpressions    string
	AnalyticsSubmissions    string
	AnalyticsLastUpdatedAt  string
}{
	ID:                      "id",
	Name:                    "name",
	URLName:                 "url_name",
	CreatedBy:               "created_by",
	UpdatedBy:               "updated_by",
	OrganizationID:          "organization_id",
	SwitchDurationInMinutes: "switch_duration_in_minutes",
	CreatedAt:               "created_at",
	UpdatedAt:               "updated_at",
	AnalyticsNumberOfForms:  "analytics_number_of_forms",
	AnalyticsImpressions:    "analytics_impressions",
	AnalyticsSubmissions:    "analytics_submissions",
	AnalyticsLastUpdatedAt:  "analytics_last_updated_at",
}

var CapturePageSetTableColumns = struct {
	ID                      string
	Name                    string
	URLName                 string
	CreatedBy               string
	UpdatedBy               string
	OrganizationID          string
	SwitchDurationInMinutes string
	CreatedAt               string
	UpdatedAt               string
	AnalyticsNumberOfForms  string
	AnalyticsImpressions    string
	AnalyticsSubmissions    string
	AnalyticsLastUpdatedAt  string
}{
	ID:                      "capture_page_sets.id",
	Name:                    "capture_page_sets.name",
	URLName:                 "capture_page_sets.url_name",
	CreatedBy:               "capture_page_sets.created_by",
	UpdatedBy:               "capture_page_sets.updated_by",
	OrganizationID:          "capture_page_sets.organization_id",
	SwitchDurationInMinutes: "capture_page_sets.switch_duration_in_minutes",
	CreatedAt:               "capture_page_sets.created_at",
	UpdatedAt:               "capture_page_sets.updated_at",
	AnalyticsNumberOfForms:  "capture_page_sets.analytics_number_of_forms",
	AnalyticsImpressions:    "capture_page_sets.analytics_impressions",
	AnalyticsSubmissions:    "capture_page_sets.analytics_submissions",
	AnalyticsLastUpdatedAt:  "capture_page_sets.analytics_last_updated_at",
}

// Generated where

var CapturePageSetWhere = struct {
	ID                      whereHelperint
	Name                    whereHelperstring
	URLName                 whereHelperstring
	CreatedBy               whereHelpernull_Int
	UpdatedBy               whereHelpernull_Int
	OrganizationID          whereHelpernull_Int
	SwitchDurationInMinutes whereHelperint
	CreatedAt               whereHelpernull_Time
	UpdatedAt               whereHelpernull_Time
	AnalyticsNumberOfForms  whereHelpernull_Int
	AnalyticsImpressions    whereHelpernull_Int
	AnalyticsSubmissions    whereHelpernull_Int
	AnalyticsLastUpdatedAt  whereHelpernull_Time
}{
	ID:                      whereHelperint{field: "`capture_page_sets`.`id`"},
	Name:                    whereHelperstring{field: "`capture_page_sets`.`name`"},
	URLName:                 whereHelperstring{field: "`capture_page_sets`.`url_name`"},
	CreatedBy:               whereHelpernull_Int{field: "`capture_page_sets`.`created_by`"},
	UpdatedBy:               whereHelpernull_Int{field: "`capture_page_sets`.`updated_by`"},
	OrganizationID:          whereHelpernull_Int{field: "`capture_page_sets`.`organization_id`"},
	SwitchDurationInMinutes: whereHelperint{field: "`capture_page_sets`.`switch_duration_in_minutes`"},
	CreatedAt:               whereHelpernull_Time{field: "`capture_page_sets`.`created_at`"},
	UpdatedAt:               whereHelpernull_Time{field: "`capture_page_sets`.`updated_at`"},
	AnalyticsNumberOfForms:  whereHelpernull_Int{field: "`capture_page_sets`.`analytics_number_of_forms`"},
	AnalyticsImpressions:    whereHelpernull_Int{field: "`capture_page_sets`.`analytics_impressions`"},
	AnalyticsSubmissions:    whereHelpernull_Int{field: "`capture_page_sets`.`analytics_submissions`"},
	AnalyticsLastUpdatedAt:  whereHelpernull_Time{field: "`capture_page_sets`.`analytics_last_updated_at`"},
}

// CapturePageSetRels is where relationship names are stored.
var CapturePageSetRels = struct {
	CreatedByUser string
	UpdatedByUser string
	Organization  string
	CapturePages  string
}{
	CreatedByUser: "CreatedByUser",
	UpdatedByUser: "UpdatedByUser",
	Organization:  "Organization",
	CapturePages:  "CapturePages",
}

// capturePageSetR is where relationships are stored.
type capturePageSetR struct {
	CreatedByUser *User            `boil:"CreatedByUser" json:"CreatedByUser" toml:"CreatedByUser" yaml:"CreatedByUser"`
	UpdatedByUser *User            `boil:"UpdatedByUser" json:"UpdatedByUser" toml:"UpdatedByUser" yaml:"UpdatedByUser"`
	Organization  *Organization    `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
	CapturePages  CapturePageSlice `boil:"CapturePages" json:"CapturePages" toml:"CapturePages" yaml:"CapturePages"`
}

// NewStruct creates a new relationship struct
func (*capturePageSetR) NewStruct() *capturePageSetR {
	return &capturePageSetR{}
}

func (r *capturePageSetR) GetCreatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.CreatedByUser
}

func (r *capturePageSetR) GetUpdatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.UpdatedByUser
}

func (r *capturePageSetR) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

func (r *capturePageSetR) GetCapturePages() CapturePageSlice {
	if r == nil {
		return nil
	}
	return r.CapturePages
}

// capturePageSetL is where Load methods for each relationship are stored.
type capturePageSetL struct{}

var (
	capturePageSetAllColumns            = []string{"id", "name", "url_name", "created_by", "updated_by", "organization_id", "switch_duration_in_minutes", "created_at", "updated_at", "analytics_number_of_forms", "analytics_impressions", "analytics_submissions", "analytics_last_updated_at"}
	capturePageSetColumnsWithoutDefault = []string{"name", "url_name", "created_by", "updated_by", "organization_id"}
	capturePageSetColumnsWithDefault    = []string{"id", "switch_duration_in_minutes", "created_at", "updated_at", "analytics_number_of_forms", "analytics_impressions", "analytics_submissions", "analytics_last_updated_at"}
	capturePageSetPrimaryKeyColumns     = []string{"id"}
	capturePageSetGeneratedColumns      = []string{}
)

type (
	// CapturePageSetSlice is an alias for a slice of pointers to CapturePageSet.
	// This should almost always be used instead of []CapturePageSet.
	CapturePageSetSlice []*CapturePageSet

	capturePageSetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	capturePageSetType                 = reflect.TypeOf(&CapturePageSet{})
	capturePageSetMapping              = queries.MakeStructMapping(capturePageSetType)
	capturePageSetPrimaryKeyMapping, _ = queries.BindMapping(capturePageSetType, capturePageSetMapping, capturePageSetPrimaryKeyColumns)
	capturePageSetInsertCacheMut       sync.RWMutex
	capturePageSetInsertCache          = make(map[string]insertCache)
	capturePageSetUpdateCacheMut       sync.RWMutex
	capturePageSetUpdateCache          = make(map[string]updateCache)
	capturePageSetUpsertCacheMut       sync.RWMutex
	capturePageSetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single capturePageSet record from the query.
func (q capturePageSetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CapturePageSet, error) {
	o := &CapturePageSet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysqlmodel: failed to execute a one query for capture_page_sets")
	}

	return o, nil
}

// All returns all CapturePageSet records from the query.
func (q capturePageSetQuery) All(ctx context.Context, exec boil.ContextExecutor) (CapturePageSetSlice, error) {
	var o []*CapturePageSet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysqlmodel: failed to assign all query results to CapturePageSet slice")
	}

	return o, nil
}

// Count returns the count of all CapturePageSet records in the query.
func (q capturePageSetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to count capture_page_sets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q capturePageSetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysqlmodel: failed to check if capture_page_sets exists")
	}

	return count > 0, nil
}

// CreatedByUser pointed to by the foreign key.
func (o *CapturePageSet) CreatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// UpdatedByUser pointed to by the foreign key.
func (o *CapturePageSet) UpdatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UpdatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Organization pointed to by the foreign key.
func (o *CapturePageSet) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// CapturePages retrieves all the capture_page's CapturePages with an executor.
func (o *CapturePageSet) CapturePages(mods ...qm.QueryMod) capturePageQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`capture_pages`.`capture_page_set_id`=?", o.ID),
	)

	return CapturePages(queryMods...)
}

// LoadCreatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (capturePageSetL) LoadCreatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCapturePageSet interface{}, mods queries.Applicator) error {
	var slice []*CapturePageSet
	var object *CapturePageSet

	if singular {
		var ok bool
		object, ok = maybeCapturePageSet.(*CapturePageSet)
		if !ok {
			object = new(CapturePageSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCapturePageSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCapturePageSet))
			}
		}
	} else {
		s, ok := maybeCapturePageSet.(*[]*CapturePageSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCapturePageSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCapturePageSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &capturePageSetR{}
		}
		if !queries.IsNil(object.CreatedBy) {
			args[object.CreatedBy] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &capturePageSetR{}
			}

			if !queries.IsNil(obj.CreatedBy) {
				args[obj.CreatedBy] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByCapturePageSets = append(foreign.R.CreatedByCapturePageSets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedBy, foreign.ID) {
				local.R.CreatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByCapturePageSets = append(foreign.R.CreatedByCapturePageSets, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (capturePageSetL) LoadUpdatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCapturePageSet interface{}, mods queries.Applicator) error {
	var slice []*CapturePageSet
	var object *CapturePageSet

	if singular {
		var ok bool
		object, ok = maybeCapturePageSet.(*CapturePageSet)
		if !ok {
			object = new(CapturePageSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCapturePageSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCapturePageSet))
			}
		}
	} else {
		s, ok := maybeCapturePageSet.(*[]*CapturePageSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCapturePageSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCapturePageSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &capturePageSetR{}
		}
		if !queries.IsNil(object.UpdatedBy) {
			args[object.UpdatedBy] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &capturePageSetR{}
			}

			if !queries.IsNil(obj.UpdatedBy) {
				args[obj.UpdatedBy] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByCapturePageSets = append(foreign.R.UpdatedByCapturePageSets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UpdatedBy, foreign.ID) {
				local.R.UpdatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByCapturePageSets = append(foreign.R.UpdatedByCapturePageSets, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (capturePageSetL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCapturePageSet interface{}, mods queries.Applicator) error {
	var slice []*CapturePageSet
	var object *CapturePageSet

	if singular {
		var ok bool
		object, ok = maybeCapturePageSet.(*CapturePageSet)
		if !ok {
			object = new(CapturePageSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCapturePageSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCapturePageSet))
			}
		}
	} else {
		s, ok := maybeCapturePageSet.(*[]*CapturePageSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCapturePageSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCapturePageSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &capturePageSetR{}
		}
		if !queries.IsNil(object.OrganizationID) {
			args[object.OrganizationID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &capturePageSetR{}
			}

			if !queries.IsNil(obj.OrganizationID) {
				args[obj.OrganizationID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`organization`),
		qm.WhereIn(`organization.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.CapturePageSets = append(foreign.R.CapturePageSets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrganizationID, foreign.ID) {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.CapturePageSets = append(foreign.R.CapturePageSets, local)
				break
			}
		}
	}

	return nil
}

// LoadCapturePages allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (capturePageSetL) LoadCapturePages(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCapturePageSet interface{}, mods queries.Applicator) error {
	var slice []*CapturePageSet
	var object *CapturePageSet

	if singular {
		var ok bool
		object, ok = maybeCapturePageSet.(*CapturePageSet)
		if !ok {
			object = new(CapturePageSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCapturePageSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCapturePageSet))
			}
		}
	} else {
		s, ok := maybeCapturePageSet.(*[]*CapturePageSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCapturePageSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCapturePageSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &capturePageSetR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &capturePageSetR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`capture_pages`),
		qm.WhereIn(`capture_pages.capture_page_set_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load capture_pages")
	}

	var resultSlice []*CapturePage
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice capture_pages")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on capture_pages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for capture_pages")
	}

	if singular {
		object.R.CapturePages = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &capturePageR{}
			}
			foreign.R.CapturePageSet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CapturePageSetID) {
				local.R.CapturePages = append(local.R.CapturePages, foreign)
				if foreign.R == nil {
					foreign.R = &capturePageR{}
				}
				foreign.R.CapturePageSet = local
				break
			}
		}
	}

	return nil
}

// SetCreatedByUser of the capturePageSet to the related item.
// Sets o.R.CreatedByUser to related.
// Adds o to related.R.CreatedByCapturePageSets.
func (o *CapturePageSet) SetCreatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `capture_page_sets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"created_by"}),
		strmangle.WhereClause("`", "`", 0, capturePageSetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedBy, related.ID)
	if o.R == nil {
		o.R = &capturePageSetR{
			CreatedByUser: related,
		}
	} else {
		o.R.CreatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByCapturePageSets: CapturePageSetSlice{o},
		}
	} else {
		related.R.CreatedByCapturePageSets = append(related.R.CreatedByCapturePageSets, o)
	}

	return nil
}

// RemoveCreatedByUser relationship.
// Sets o.R.CreatedByUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CapturePageSet) RemoveCreatedByUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.CreatedBy, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CreatedByUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedByCapturePageSets {
		if queries.Equal(o.CreatedBy, ri.CreatedBy) {
			continue
		}

		ln := len(related.R.CreatedByCapturePageSets)
		if ln > 1 && i < ln-1 {
			related.R.CreatedByCapturePageSets[i] = related.R.CreatedByCapturePageSets[ln-1]
		}
		related.R.CreatedByCapturePageSets = related.R.CreatedByCapturePageSets[:ln-1]
		break
	}
	return nil
}

// SetUpdatedByUser of the capturePageSet to the related item.
// Sets o.R.UpdatedByUser to related.
// Adds o to related.R.UpdatedByCapturePageSets.
func (o *CapturePageSet) SetUpdatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `capture_page_sets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"updated_by"}),
		strmangle.WhereClause("`", "`", 0, capturePageSetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UpdatedBy, related.ID)
	if o.R == nil {
		o.R = &capturePageSetR{
			UpdatedByUser: related,
		}
	} else {
		o.R.UpdatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByCapturePageSets: CapturePageSetSlice{o},
		}
	} else {
		related.R.UpdatedByCapturePageSets = append(related.R.UpdatedByCapturePageSets, o)
	}

	return nil
}

// RemoveUpdatedByUser relationship.
// Sets o.R.UpdatedByUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CapturePageSet) RemoveUpdatedByUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UpdatedBy, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("updated_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UpdatedByUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UpdatedByCapturePageSets {
		if queries.Equal(o.UpdatedBy, ri.UpdatedBy) {
			continue
		}

		ln := len(related.R.UpdatedByCapturePageSets)
		if ln > 1 && i < ln-1 {
			related.R.UpdatedByCapturePageSets[i] = related.R.UpdatedByCapturePageSets[ln-1]
		}
		related.R.UpdatedByCapturePageSets = related.R.UpdatedByCapturePageSets[:ln-1]
		break
	}
	return nil
}

// SetOrganization of the capturePageSet to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.CapturePageSets.
func (o *CapturePageSet) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `capture_page_sets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"organization_id"}),
		strmangle.WhereClause("`", "`", 0, capturePageSetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrganizationID, related.ID)
	if o.R == nil {
		o.R = &capturePageSetR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			CapturePageSets: CapturePageSetSlice{o},
		}
	} else {
		related.R.CapturePageSets = append(related.R.CapturePageSets, o)
	}

	return nil
}

// RemoveOrganization relationship.
// Sets o.R.Organization to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CapturePageSet) RemoveOrganization(ctx context.Context, exec boil.ContextExecutor, related *Organization) error {
	var err error

	queries.SetScanner(&o.OrganizationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("organization_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Organization = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CapturePageSets {
		if queries.Equal(o.OrganizationID, ri.OrganizationID) {
			continue
		}

		ln := len(related.R.CapturePageSets)
		if ln > 1 && i < ln-1 {
			related.R.CapturePageSets[i] = related.R.CapturePageSets[ln-1]
		}
		related.R.CapturePageSets = related.R.CapturePageSets[:ln-1]
		break
	}
	return nil
}

// AddCapturePages adds the given related objects to the existing relationships
// of the capture_page_set, optionally inserting them as new records.
// Appends related to o.R.CapturePages.
// Sets related.R.CapturePageSet appropriately.
func (o *CapturePageSet) AddCapturePages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CapturePage) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CapturePageSetID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `capture_pages` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"capture_page_set_id"}),
				strmangle.WhereClause("`", "`", 0, capturePagePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CapturePageSetID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &capturePageSetR{
			CapturePages: related,
		}
	} else {
		o.R.CapturePages = append(o.R.CapturePages, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &capturePageR{
				CapturePageSet: o,
			}
		} else {
			rel.R.CapturePageSet = o
		}
	}
	return nil
}

// SetCapturePages removes all previously related items of the
// capture_page_set replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CapturePageSet's CapturePages accordingly.
// Replaces o.R.CapturePages with related.
// Sets related.R.CapturePageSet's CapturePages accordingly.
func (o *CapturePageSet) SetCapturePages(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CapturePage) error {
	query := "update `capture_pages` set `capture_page_set_id` = null where `capture_page_set_id` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CapturePages {
			queries.SetScanner(&rel.CapturePageSetID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CapturePageSet = nil
		}
		o.R.CapturePages = nil
	}

	return o.AddCapturePages(ctx, exec, insert, related...)
}

// RemoveCapturePages relationships from objects passed in.
// Removes related items from R.CapturePages (uses pointer comparison, removal does not keep order)
// Sets related.R.CapturePageSet.
func (o *CapturePageSet) RemoveCapturePages(ctx context.Context, exec boil.ContextExecutor, related ...*CapturePage) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CapturePageSetID, nil)
		if rel.R != nil {
			rel.R.CapturePageSet = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("capture_page_set_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CapturePages {
			if rel != ri {
				continue
			}

			ln := len(o.R.CapturePages)
			if ln > 1 && i < ln-1 {
				o.R.CapturePages[i] = o.R.CapturePages[ln-1]
			}
			o.R.CapturePages = o.R.CapturePages[:ln-1]
			break
		}
	}

	return nil
}

// CapturePageSets retrieves all the records using an executor.
func CapturePageSets(mods ...qm.QueryMod) capturePageSetQuery {
	mods = append(mods, qm.From("`capture_page_sets`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`capture_page_sets`.*"})
	}

	return capturePageSetQuery{q}
}

// FindCapturePageSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCapturePageSet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*CapturePageSet, error) {
	capturePageSetObj := &CapturePageSet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `capture_page_sets` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, capturePageSetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysqlmodel: unable to select from capture_page_sets")
	}

	return capturePageSetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CapturePageSet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysqlmodel: no capture_page_sets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(capturePageSetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	capturePageSetInsertCacheMut.RLock()
	cache, cached := capturePageSetInsertCache[key]
	capturePageSetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			capturePageSetAllColumns,
			capturePageSetColumnsWithDefault,
			capturePageSetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(capturePageSetType, capturePageSetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(capturePageSetType, capturePageSetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `capture_page_sets` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `capture_page_sets` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `capture_page_sets` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, capturePageSetPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to insert into capture_page_sets")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == capturePageSetMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to populate default values for capture_page_sets")
	}

CacheNoHooks:
	if !cached {
		capturePageSetInsertCacheMut.Lock()
		capturePageSetInsertCache[key] = cache
		capturePageSetInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the CapturePageSet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CapturePageSet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	capturePageSetUpdateCacheMut.RLock()
	cache, cached := capturePageSetUpdateCache[key]
	capturePageSetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			capturePageSetAllColumns,
			capturePageSetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("mysqlmodel: unable to update capture_page_sets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `capture_page_sets` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, capturePageSetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(capturePageSetType, capturePageSetMapping, append(wl, capturePageSetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to update capture_page_sets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by update for capture_page_sets")
	}

	if !cached {
		capturePageSetUpdateCacheMut.Lock()
		capturePageSetUpdateCache[key] = cache
		capturePageSetUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q capturePageSetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to update all for capture_page_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to retrieve rows affected for capture_page_sets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CapturePageSetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysqlmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), capturePageSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `capture_page_sets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, capturePageSetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to update all in capturePageSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to retrieve rows affected all in update all capturePageSet")
	}
	return rowsAff, nil
}

var mySQLCapturePageSetUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CapturePageSet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysqlmodel: no capture_page_sets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(capturePageSetColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLCapturePageSetUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	capturePageSetUpsertCacheMut.RLock()
	cache, cached := capturePageSetUpsertCache[key]
	capturePageSetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			capturePageSetAllColumns,
			capturePageSetColumnsWithDefault,
			capturePageSetColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			capturePageSetAllColumns,
			capturePageSetPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysqlmodel: unable to upsert capture_page_sets, could not build update column list")
		}

		ret := strmangle.SetComplement(capturePageSetAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`capture_page_sets`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `capture_page_sets` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(capturePageSetType, capturePageSetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(capturePageSetType, capturePageSetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to upsert for capture_page_sets")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == capturePageSetMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(capturePageSetType, capturePageSetMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to retrieve unique values for capture_page_sets")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to populate default values for capture_page_sets")
	}

CacheNoHooks:
	if !cached {
		capturePageSetUpsertCacheMut.Lock()
		capturePageSetUpsertCache[key] = cache
		capturePageSetUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single CapturePageSet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CapturePageSet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysqlmodel: no CapturePageSet provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), capturePageSetPrimaryKeyMapping)
	sql := "DELETE FROM `capture_page_sets` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to delete from capture_page_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by delete for capture_page_sets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q capturePageSetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysqlmodel: no capturePageSetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to delete all from capture_page_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by deleteall for capture_page_sets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CapturePageSetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), capturePageSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `capture_page_sets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, capturePageSetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to delete all from capturePageSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by deleteall for capture_page_sets")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CapturePageSet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCapturePageSet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CapturePageSetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CapturePageSetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), capturePageSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `capture_page_sets`.* FROM `capture_page_sets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, capturePageSetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to reload all in CapturePageSetSlice")
	}

	*o = slice

	return nil
}

// CapturePageSetExists checks if the CapturePageSet row exists.
func CapturePageSetExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `capture_page_sets` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysqlmodel: unable to check if capture_page_sets exists")
	}

	return exists, nil
}

// Exists checks if the CapturePageSet row exists.
func (o *CapturePageSet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CapturePageSetExists(ctx, exec, o.ID)
}
