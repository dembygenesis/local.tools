// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysqlmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// User is an object representing the database table.
type User struct {
	ID                int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Firstname         string      `boil:"firstname" json:"firstname" toml:"firstname" yaml:"firstname"`
	Lastname          string      `boil:"lastname" json:"lastname" toml:"lastname" yaml:"lastname"`
	Email             string      `boil:"email" json:"email" toml:"email" yaml:"email"`
	Password          string      `boil:"password" json:"password" toml:"password" yaml:"password"`
	CategoryTypeRefID int         `boil:"category_type_ref_id" json:"category_type_ref_id" toml:"category_type_ref_id" yaml:"category_type_ref_id"`
	CreatedBy         null.Int    `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	LastUpdatedBy     null.Int    `boil:"last_updated_by" json:"last_updated_by,omitempty" toml:"last_updated_by" yaml:"last_updated_by,omitempty"`
	CreatedAt         time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	LastUpdatedAt     null.Time   `boil:"last_updated_at" json:"last_updated_at,omitempty" toml:"last_updated_at" yaml:"last_updated_at,omitempty"`
	IsActive          bool        `boil:"is_active" json:"is_active" toml:"is_active" yaml:"is_active"`
	ResetToken        null.String `boil:"reset_token" json:"reset_token,omitempty" toml:"reset_token" yaml:"reset_token,omitempty"`
	Address           null.String `boil:"address" json:"address,omitempty" toml:"address" yaml:"address,omitempty"`
	Birthday          null.Time   `boil:"birthday" json:"birthday,omitempty" toml:"birthday" yaml:"birthday,omitempty"`
	Gender            null.String `boil:"gender" json:"gender,omitempty" toml:"gender" yaml:"gender,omitempty"`

	R *userR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserColumns = struct {
	ID                string
	Firstname         string
	Lastname          string
	Email             string
	Password          string
	CategoryTypeRefID string
	CreatedBy         string
	LastUpdatedBy     string
	CreatedAt         string
	LastUpdatedAt     string
	IsActive          string
	ResetToken        string
	Address           string
	Birthday          string
	Gender            string
}{
	ID:                "id",
	Firstname:         "firstname",
	Lastname:          "lastname",
	Email:             "email",
	Password:          "password",
	CategoryTypeRefID: "category_type_ref_id",
	CreatedBy:         "created_by",
	LastUpdatedBy:     "last_updated_by",
	CreatedAt:         "created_at",
	LastUpdatedAt:     "last_updated_at",
	IsActive:          "is_active",
	ResetToken:        "reset_token",
	Address:           "address",
	Birthday:          "birthday",
	Gender:            "gender",
}

var UserTableColumns = struct {
	ID                string
	Firstname         string
	Lastname          string
	Email             string
	Password          string
	CategoryTypeRefID string
	CreatedBy         string
	LastUpdatedBy     string
	CreatedAt         string
	LastUpdatedAt     string
	IsActive          string
	ResetToken        string
	Address           string
	Birthday          string
	Gender            string
}{
	ID:                "user.id",
	Firstname:         "user.firstname",
	Lastname:          "user.lastname",
	Email:             "user.email",
	Password:          "user.password",
	CategoryTypeRefID: "user.category_type_ref_id",
	CreatedBy:         "user.created_by",
	LastUpdatedBy:     "user.last_updated_by",
	CreatedAt:         "user.created_at",
	LastUpdatedAt:     "user.last_updated_at",
	IsActive:          "user.is_active",
	ResetToken:        "user.reset_token",
	Address:           "user.address",
	Birthday:          "user.birthday",
	Gender:            "user.gender",
}

// Generated where

var UserWhere = struct {
	ID                whereHelperint
	Firstname         whereHelperstring
	Lastname          whereHelperstring
	Email             whereHelperstring
	Password          whereHelperstring
	CategoryTypeRefID whereHelperint
	CreatedBy         whereHelpernull_Int
	LastUpdatedBy     whereHelpernull_Int
	CreatedAt         whereHelpertime_Time
	LastUpdatedAt     whereHelpernull_Time
	IsActive          whereHelperbool
	ResetToken        whereHelpernull_String
	Address           whereHelpernull_String
	Birthday          whereHelpernull_Time
	Gender            whereHelpernull_String
}{
	ID:                whereHelperint{field: "`user`.`id`"},
	Firstname:         whereHelperstring{field: "`user`.`firstname`"},
	Lastname:          whereHelperstring{field: "`user`.`lastname`"},
	Email:             whereHelperstring{field: "`user`.`email`"},
	Password:          whereHelperstring{field: "`user`.`password`"},
	CategoryTypeRefID: whereHelperint{field: "`user`.`category_type_ref_id`"},
	CreatedBy:         whereHelpernull_Int{field: "`user`.`created_by`"},
	LastUpdatedBy:     whereHelpernull_Int{field: "`user`.`last_updated_by`"},
	CreatedAt:         whereHelpertime_Time{field: "`user`.`created_at`"},
	LastUpdatedAt:     whereHelpernull_Time{field: "`user`.`last_updated_at`"},
	IsActive:          whereHelperbool{field: "`user`.`is_active`"},
	ResetToken:        whereHelpernull_String{field: "`user`.`reset_token`"},
	Address:           whereHelpernull_String{field: "`user`.`address`"},
	Birthday:          whereHelpernull_Time{field: "`user`.`birthday`"},
	Gender:            whereHelpernull_String{field: "`user`.`gender`"},
}

// UserRels is where relationship names are stored.
var UserRels = struct {
	CategoryTypeRef           string
	CreatedByUser             string
	LastUpdatedByUser         string
	CreatedByClickTrackerSets string
	UpdatedByClickTrackerSets string
	CreatedByClickTrackers    string
	UpdatedByClickTrackers    string
	CreatedByUsers            string
	LastUpdatedByUsers        string
}{
	CategoryTypeRef:           "CategoryTypeRef",
	CreatedByUser:             "CreatedByUser",
	LastUpdatedByUser:         "LastUpdatedByUser",
	CreatedByClickTrackerSets: "CreatedByClickTrackerSets",
	UpdatedByClickTrackerSets: "UpdatedByClickTrackerSets",
	CreatedByClickTrackers:    "CreatedByClickTrackers",
	UpdatedByClickTrackers:    "UpdatedByClickTrackers",
	CreatedByUsers:            "CreatedByUsers",
	LastUpdatedByUsers:        "LastUpdatedByUsers",
}

// userR is where relationships are stored.
type userR struct {
	CategoryTypeRef           *Category            `boil:"CategoryTypeRef" json:"CategoryTypeRef" toml:"CategoryTypeRef" yaml:"CategoryTypeRef"`
	CreatedByUser             *User                `boil:"CreatedByUser" json:"CreatedByUser" toml:"CreatedByUser" yaml:"CreatedByUser"`
	LastUpdatedByUser         *User                `boil:"LastUpdatedByUser" json:"LastUpdatedByUser" toml:"LastUpdatedByUser" yaml:"LastUpdatedByUser"`
	CreatedByClickTrackerSets ClickTrackerSetSlice `boil:"CreatedByClickTrackerSets" json:"CreatedByClickTrackerSets" toml:"CreatedByClickTrackerSets" yaml:"CreatedByClickTrackerSets"`
	UpdatedByClickTrackerSets ClickTrackerSetSlice `boil:"UpdatedByClickTrackerSets" json:"UpdatedByClickTrackerSets" toml:"UpdatedByClickTrackerSets" yaml:"UpdatedByClickTrackerSets"`
	CreatedByClickTrackers    ClickTrackerSlice    `boil:"CreatedByClickTrackers" json:"CreatedByClickTrackers" toml:"CreatedByClickTrackers" yaml:"CreatedByClickTrackers"`
	UpdatedByClickTrackers    ClickTrackerSlice    `boil:"UpdatedByClickTrackers" json:"UpdatedByClickTrackers" toml:"UpdatedByClickTrackers" yaml:"UpdatedByClickTrackers"`
	CreatedByUsers            UserSlice            `boil:"CreatedByUsers" json:"CreatedByUsers" toml:"CreatedByUsers" yaml:"CreatedByUsers"`
	LastUpdatedByUsers        UserSlice            `boil:"LastUpdatedByUsers" json:"LastUpdatedByUsers" toml:"LastUpdatedByUsers" yaml:"LastUpdatedByUsers"`
}

// NewStruct creates a new relationship struct
func (*userR) NewStruct() *userR {
	return &userR{}
}

func (r *userR) GetCategoryTypeRef() *Category {
	if r == nil {
		return nil
	}
	return r.CategoryTypeRef
}

func (r *userR) GetCreatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.CreatedByUser
}

func (r *userR) GetLastUpdatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.LastUpdatedByUser
}

func (r *userR) GetCreatedByClickTrackerSets() ClickTrackerSetSlice {
	if r == nil {
		return nil
	}
	return r.CreatedByClickTrackerSets
}

func (r *userR) GetUpdatedByClickTrackerSets() ClickTrackerSetSlice {
	if r == nil {
		return nil
	}
	return r.UpdatedByClickTrackerSets
}

func (r *userR) GetCreatedByClickTrackers() ClickTrackerSlice {
	if r == nil {
		return nil
	}
	return r.CreatedByClickTrackers
}

func (r *userR) GetUpdatedByClickTrackers() ClickTrackerSlice {
	if r == nil {
		return nil
	}
	return r.UpdatedByClickTrackers
}

func (r *userR) GetCreatedByUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.CreatedByUsers
}

func (r *userR) GetLastUpdatedByUsers() UserSlice {
	if r == nil {
		return nil
	}
	return r.LastUpdatedByUsers
}

// userL is where Load methods for each relationship are stored.
type userL struct{}

var (
	userAllColumns            = []string{"id", "firstname", "lastname", "email", "password", "category_type_ref_id", "created_by", "last_updated_by", "created_at", "last_updated_at", "is_active", "reset_token", "address", "birthday", "gender"}
	userColumnsWithoutDefault = []string{"firstname", "lastname", "email", "password", "category_type_ref_id", "created_by", "last_updated_by", "last_updated_at", "reset_token", "address", "birthday", "gender"}
	userColumnsWithDefault    = []string{"id", "created_at", "is_active"}
	userPrimaryKeyColumns     = []string{"id"}
	userGeneratedColumns      = []string{}
)

type (
	// UserSlice is an alias for a slice of pointers to User.
	// This should almost always be used instead of []User.
	UserSlice []*User

	userQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userType                 = reflect.TypeOf(&User{})
	userMapping              = queries.MakeStructMapping(userType)
	userPrimaryKeyMapping, _ = queries.BindMapping(userType, userMapping, userPrimaryKeyColumns)
	userInsertCacheMut       sync.RWMutex
	userInsertCache          = make(map[string]insertCache)
	userUpdateCacheMut       sync.RWMutex
	userUpdateCache          = make(map[string]updateCache)
	userUpsertCacheMut       sync.RWMutex
	userUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single user record from the query.
func (q userQuery) One(ctx context.Context, exec boil.ContextExecutor) (*User, error) {
	o := &User{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysqlmodel: failed to execute a one query for user")
	}

	return o, nil
}

// All returns all User records from the query.
func (q userQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserSlice, error) {
	var o []*User

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysqlmodel: failed to assign all query results to User slice")
	}

	return o, nil
}

// Count returns the count of all User records in the query.
func (q userQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to count user rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysqlmodel: failed to check if user exists")
	}

	return count > 0, nil
}

// CategoryTypeRef pointed to by the foreign key.
func (o *User) CategoryTypeRef(mods ...qm.QueryMod) categoryQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CategoryTypeRefID),
	}

	queryMods = append(queryMods, mods...)

	return Categories(queryMods...)
}

// CreatedByUser pointed to by the foreign key.
func (o *User) CreatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LastUpdatedByUser pointed to by the foreign key.
func (o *User) LastUpdatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.LastUpdatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// CreatedByClickTrackerSets retrieves all the click_tracker_set's ClickTrackerSets with an executor via created_by column.
func (o *User) CreatedByClickTrackerSets(mods ...qm.QueryMod) clickTrackerSetQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`click_tracker_sets`.`created_by`=?", o.ID),
	)

	return ClickTrackerSets(queryMods...)
}

// UpdatedByClickTrackerSets retrieves all the click_tracker_set's ClickTrackerSets with an executor via updated_by column.
func (o *User) UpdatedByClickTrackerSets(mods ...qm.QueryMod) clickTrackerSetQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`click_tracker_sets`.`updated_by`=?", o.ID),
	)

	return ClickTrackerSets(queryMods...)
}

// CreatedByClickTrackers retrieves all the click_tracker's ClickTrackers with an executor via created_by column.
func (o *User) CreatedByClickTrackers(mods ...qm.QueryMod) clickTrackerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`click_trackers`.`created_by`=?", o.ID),
	)

	return ClickTrackers(queryMods...)
}

// UpdatedByClickTrackers retrieves all the click_tracker's ClickTrackers with an executor via updated_by column.
func (o *User) UpdatedByClickTrackers(mods ...qm.QueryMod) clickTrackerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`click_trackers`.`updated_by`=?", o.ID),
	)

	return ClickTrackers(queryMods...)
}

// CreatedByUsers retrieves all the user's Users with an executor via created_by column.
func (o *User) CreatedByUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user`.`created_by`=?", o.ID),
	)

	return Users(queryMods...)
}

// LastUpdatedByUsers retrieves all the user's Users with an executor via last_updated_by column.
func (o *User) LastUpdatedByUsers(mods ...qm.QueryMod) userQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`user`.`last_updated_by`=?", o.ID),
	)

	return Users(queryMods...)
}

// LoadCategoryTypeRef allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userL) LoadCategoryTypeRef(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.CategoryTypeRefID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			args[obj.CategoryTypeRefID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`category`),
		qm.WhereIn(`category.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Category")
	}

	var resultSlice []*Category
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Category")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for category")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for category")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CategoryTypeRef = foreign
		if foreign.R == nil {
			foreign.R = &categoryR{}
		}
		foreign.R.CategoryTypeRefUsers = append(foreign.R.CategoryTypeRefUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.CategoryTypeRefID == foreign.ID {
				local.R.CategoryTypeRef = foreign
				if foreign.R == nil {
					foreign.R = &categoryR{}
				}
				foreign.R.CategoryTypeRefUsers = append(foreign.R.CategoryTypeRefUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userL) LoadCreatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		if !queries.IsNil(object.CreatedBy) {
			args[object.CreatedBy] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			if !queries.IsNil(obj.CreatedBy) {
				args[obj.CreatedBy] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByUsers = append(foreign.R.CreatedByUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedBy, foreign.ID) {
				local.R.CreatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByUsers = append(foreign.R.CreatedByUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadLastUpdatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userL) LoadLastUpdatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		if !queries.IsNil(object.LastUpdatedBy) {
			args[object.LastUpdatedBy] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}

			if !queries.IsNil(obj.LastUpdatedBy) {
				args[obj.LastUpdatedBy] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.LastUpdatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.LastUpdatedByUsers = append(foreign.R.LastUpdatedByUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.LastUpdatedBy, foreign.ID) {
				local.R.LastUpdatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.LastUpdatedByUsers = append(foreign.R.LastUpdatedByUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadCreatedByClickTrackerSets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByClickTrackerSets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`click_tracker_sets`),
		qm.WhereIn(`click_tracker_sets.created_by in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load click_tracker_sets")
	}

	var resultSlice []*ClickTrackerSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice click_tracker_sets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on click_tracker_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for click_tracker_sets")
	}

	if singular {
		object.R.CreatedByClickTrackerSets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clickTrackerSetR{}
			}
			foreign.R.CreatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreatedBy) {
				local.R.CreatedByClickTrackerSets = append(local.R.CreatedByClickTrackerSets, foreign)
				if foreign.R == nil {
					foreign.R = &clickTrackerSetR{}
				}
				foreign.R.CreatedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByClickTrackerSets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByClickTrackerSets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`click_tracker_sets`),
		qm.WhereIn(`click_tracker_sets.updated_by in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load click_tracker_sets")
	}

	var resultSlice []*ClickTrackerSet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice click_tracker_sets")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on click_tracker_sets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for click_tracker_sets")
	}

	if singular {
		object.R.UpdatedByClickTrackerSets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clickTrackerSetR{}
			}
			foreign.R.UpdatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.UpdatedBy) {
				local.R.UpdatedByClickTrackerSets = append(local.R.UpdatedByClickTrackerSets, foreign)
				if foreign.R == nil {
					foreign.R = &clickTrackerSetR{}
				}
				foreign.R.UpdatedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByClickTrackers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByClickTrackers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`click_trackers`),
		qm.WhereIn(`click_trackers.created_by in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load click_trackers")
	}

	var resultSlice []*ClickTracker
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice click_trackers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on click_trackers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for click_trackers")
	}

	if singular {
		object.R.CreatedByClickTrackers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clickTrackerR{}
			}
			foreign.R.CreatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.CreatedBy {
				local.R.CreatedByClickTrackers = append(local.R.CreatedByClickTrackers, foreign)
				if foreign.R == nil {
					foreign.R = &clickTrackerR{}
				}
				foreign.R.CreatedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByClickTrackers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadUpdatedByClickTrackers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`click_trackers`),
		qm.WhereIn(`click_trackers.updated_by in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load click_trackers")
	}

	var resultSlice []*ClickTracker
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice click_trackers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on click_trackers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for click_trackers")
	}

	if singular {
		object.R.UpdatedByClickTrackers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clickTrackerR{}
			}
			foreign.R.UpdatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UpdatedBy {
				local.R.UpdatedByClickTrackers = append(local.R.UpdatedByClickTrackers, foreign)
				if foreign.R == nil {
					foreign.R = &clickTrackerR{}
				}
				foreign.R.UpdatedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadCreatedByUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadCreatedByUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.created_by in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if singular {
		object.R.CreatedByUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.CreatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CreatedBy) {
				local.R.CreatedByUsers = append(local.R.CreatedByUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByUser = local
				break
			}
		}
	}

	return nil
}

// LoadLastUpdatedByUsers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userL) LoadLastUpdatedByUsers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUser interface{}, mods queries.Applicator) error {
	var slice []*User
	var object *User

	if singular {
		var ok bool
		object, ok = maybeUser.(*User)
		if !ok {
			object = new(User)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUser))
			}
		}
	} else {
		s, ok := maybeUser.(*[]*User)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.last_updated_by in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load user")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice user")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if singular {
		object.R.LastUpdatedByUsers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &userR{}
			}
			foreign.R.LastUpdatedByUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.LastUpdatedBy) {
				local.R.LastUpdatedByUsers = append(local.R.LastUpdatedByUsers, foreign)
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.LastUpdatedByUser = local
				break
			}
		}
	}

	return nil
}

// SetCategoryTypeRef of the user to the related item.
// Sets o.R.CategoryTypeRef to related.
// Adds o to related.R.CategoryTypeRefUsers.
func (o *User) SetCategoryTypeRef(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Category) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"category_type_ref_id"}),
		strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.CategoryTypeRefID = related.ID
	if o.R == nil {
		o.R = &userR{
			CategoryTypeRef: related,
		}
	} else {
		o.R.CategoryTypeRef = related
	}

	if related.R == nil {
		related.R = &categoryR{
			CategoryTypeRefUsers: UserSlice{o},
		}
	} else {
		related.R.CategoryTypeRefUsers = append(related.R.CategoryTypeRefUsers, o)
	}

	return nil
}

// SetCreatedByUser of the user to the related item.
// Sets o.R.CreatedByUser to related.
// Adds o to related.R.CreatedByUsers.
func (o *User) SetCreatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"created_by"}),
		strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedBy, related.ID)
	if o.R == nil {
		o.R = &userR{
			CreatedByUser: related,
		}
	} else {
		o.R.CreatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByUsers: UserSlice{o},
		}
	} else {
		related.R.CreatedByUsers = append(related.R.CreatedByUsers, o)
	}

	return nil
}

// RemoveCreatedByUser relationship.
// Sets o.R.CreatedByUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *User) RemoveCreatedByUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.CreatedBy, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CreatedByUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedByUsers {
		if queries.Equal(o.CreatedBy, ri.CreatedBy) {
			continue
		}

		ln := len(related.R.CreatedByUsers)
		if ln > 1 && i < ln-1 {
			related.R.CreatedByUsers[i] = related.R.CreatedByUsers[ln-1]
		}
		related.R.CreatedByUsers = related.R.CreatedByUsers[:ln-1]
		break
	}
	return nil
}

// SetLastUpdatedByUser of the user to the related item.
// Sets o.R.LastUpdatedByUser to related.
// Adds o to related.R.LastUpdatedByUsers.
func (o *User) SetLastUpdatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `user` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"last_updated_by"}),
		strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.LastUpdatedBy, related.ID)
	if o.R == nil {
		o.R = &userR{
			LastUpdatedByUser: related,
		}
	} else {
		o.R.LastUpdatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			LastUpdatedByUsers: UserSlice{o},
		}
	} else {
		related.R.LastUpdatedByUsers = append(related.R.LastUpdatedByUsers, o)
	}

	return nil
}

// RemoveLastUpdatedByUser relationship.
// Sets o.R.LastUpdatedByUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *User) RemoveLastUpdatedByUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.LastUpdatedBy, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("last_updated_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.LastUpdatedByUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.LastUpdatedByUsers {
		if queries.Equal(o.LastUpdatedBy, ri.LastUpdatedBy) {
			continue
		}

		ln := len(related.R.LastUpdatedByUsers)
		if ln > 1 && i < ln-1 {
			related.R.LastUpdatedByUsers[i] = related.R.LastUpdatedByUsers[ln-1]
		}
		related.R.LastUpdatedByUsers = related.R.LastUpdatedByUsers[:ln-1]
		break
	}
	return nil
}

// AddCreatedByClickTrackerSets adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByClickTrackerSets.
// Sets related.R.CreatedByUser appropriately.
func (o *User) AddCreatedByClickTrackerSets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ClickTrackerSet) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreatedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `click_tracker_sets` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"created_by"}),
				strmangle.WhereClause("`", "`", 0, clickTrackerSetPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreatedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByClickTrackerSets: related,
		}
	} else {
		o.R.CreatedByClickTrackerSets = append(o.R.CreatedByClickTrackerSets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clickTrackerSetR{
				CreatedByUser: o,
			}
		} else {
			rel.R.CreatedByUser = o
		}
	}
	return nil
}

// SetCreatedByClickTrackerSets removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedByUser's CreatedByClickTrackerSets accordingly.
// Replaces o.R.CreatedByClickTrackerSets with related.
// Sets related.R.CreatedByUser's CreatedByClickTrackerSets accordingly.
func (o *User) SetCreatedByClickTrackerSets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ClickTrackerSet) error {
	query := "update `click_tracker_sets` set `created_by` = null where `created_by` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreatedByClickTrackerSets {
			queries.SetScanner(&rel.CreatedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreatedByUser = nil
		}
		o.R.CreatedByClickTrackerSets = nil
	}

	return o.AddCreatedByClickTrackerSets(ctx, exec, insert, related...)
}

// RemoveCreatedByClickTrackerSets relationships from objects passed in.
// Removes related items from R.CreatedByClickTrackerSets (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedByUser.
func (o *User) RemoveCreatedByClickTrackerSets(ctx context.Context, exec boil.ContextExecutor, related ...*ClickTrackerSet) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreatedBy, nil)
		if rel.R != nil {
			rel.R.CreatedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreatedByClickTrackerSets {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreatedByClickTrackerSets)
			if ln > 1 && i < ln-1 {
				o.R.CreatedByClickTrackerSets[i] = o.R.CreatedByClickTrackerSets[ln-1]
			}
			o.R.CreatedByClickTrackerSets = o.R.CreatedByClickTrackerSets[:ln-1]
			break
		}
	}

	return nil
}

// AddUpdatedByClickTrackerSets adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByClickTrackerSets.
// Sets related.R.UpdatedByUser appropriately.
func (o *User) AddUpdatedByClickTrackerSets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ClickTrackerSet) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.UpdatedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `click_tracker_sets` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"updated_by"}),
				strmangle.WhereClause("`", "`", 0, clickTrackerSetPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.UpdatedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByClickTrackerSets: related,
		}
	} else {
		o.R.UpdatedByClickTrackerSets = append(o.R.UpdatedByClickTrackerSets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clickTrackerSetR{
				UpdatedByUser: o,
			}
		} else {
			rel.R.UpdatedByUser = o
		}
	}
	return nil
}

// SetUpdatedByClickTrackerSets removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.UpdatedByUser's UpdatedByClickTrackerSets accordingly.
// Replaces o.R.UpdatedByClickTrackerSets with related.
// Sets related.R.UpdatedByUser's UpdatedByClickTrackerSets accordingly.
func (o *User) SetUpdatedByClickTrackerSets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ClickTrackerSet) error {
	query := "update `click_tracker_sets` set `updated_by` = null where `updated_by` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.UpdatedByClickTrackerSets {
			queries.SetScanner(&rel.UpdatedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.UpdatedByUser = nil
		}
		o.R.UpdatedByClickTrackerSets = nil
	}

	return o.AddUpdatedByClickTrackerSets(ctx, exec, insert, related...)
}

// RemoveUpdatedByClickTrackerSets relationships from objects passed in.
// Removes related items from R.UpdatedByClickTrackerSets (uses pointer comparison, removal does not keep order)
// Sets related.R.UpdatedByUser.
func (o *User) RemoveUpdatedByClickTrackerSets(ctx context.Context, exec boil.ContextExecutor, related ...*ClickTrackerSet) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.UpdatedBy, nil)
		if rel.R != nil {
			rel.R.UpdatedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("updated_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.UpdatedByClickTrackerSets {
			if rel != ri {
				continue
			}

			ln := len(o.R.UpdatedByClickTrackerSets)
			if ln > 1 && i < ln-1 {
				o.R.UpdatedByClickTrackerSets[i] = o.R.UpdatedByClickTrackerSets[ln-1]
			}
			o.R.UpdatedByClickTrackerSets = o.R.UpdatedByClickTrackerSets[:ln-1]
			break
		}
	}

	return nil
}

// AddCreatedByClickTrackers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByClickTrackers.
// Sets related.R.CreatedByUser appropriately.
func (o *User) AddCreatedByClickTrackers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ClickTracker) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.CreatedBy = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `click_trackers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"created_by"}),
				strmangle.WhereClause("`", "`", 0, clickTrackerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.CreatedBy = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByClickTrackers: related,
		}
	} else {
		o.R.CreatedByClickTrackers = append(o.R.CreatedByClickTrackers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clickTrackerR{
				CreatedByUser: o,
			}
		} else {
			rel.R.CreatedByUser = o
		}
	}
	return nil
}

// AddUpdatedByClickTrackers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.UpdatedByClickTrackers.
// Sets related.R.UpdatedByUser appropriately.
func (o *User) AddUpdatedByClickTrackers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ClickTracker) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UpdatedBy = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `click_trackers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"updated_by"}),
				strmangle.WhereClause("`", "`", 0, clickTrackerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UpdatedBy = o.ID
		}
	}

	if o.R == nil {
		o.R = &userR{
			UpdatedByClickTrackers: related,
		}
	} else {
		o.R.UpdatedByClickTrackers = append(o.R.UpdatedByClickTrackers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clickTrackerR{
				UpdatedByUser: o,
			}
		} else {
			rel.R.UpdatedByUser = o
		}
	}
	return nil
}

// AddCreatedByUsers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.CreatedByUsers.
// Sets related.R.CreatedByUser appropriately.
func (o *User) AddCreatedByUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CreatedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"created_by"}),
				strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CreatedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			CreatedByUsers: related,
		}
	} else {
		o.R.CreatedByUsers = append(o.R.CreatedByUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				CreatedByUser: o,
			}
		} else {
			rel.R.CreatedByUser = o
		}
	}
	return nil
}

// SetCreatedByUsers removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CreatedByUser's CreatedByUsers accordingly.
// Replaces o.R.CreatedByUsers with related.
// Sets related.R.CreatedByUser's CreatedByUsers accordingly.
func (o *User) SetCreatedByUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update `user` set `created_by` = null where `created_by` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CreatedByUsers {
			queries.SetScanner(&rel.CreatedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CreatedByUser = nil
		}
		o.R.CreatedByUsers = nil
	}

	return o.AddCreatedByUsers(ctx, exec, insert, related...)
}

// RemoveCreatedByUsers relationships from objects passed in.
// Removes related items from R.CreatedByUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.CreatedByUser.
func (o *User) RemoveCreatedByUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CreatedBy, nil)
		if rel.R != nil {
			rel.R.CreatedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CreatedByUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.CreatedByUsers)
			if ln > 1 && i < ln-1 {
				o.R.CreatedByUsers[i] = o.R.CreatedByUsers[ln-1]
			}
			o.R.CreatedByUsers = o.R.CreatedByUsers[:ln-1]
			break
		}
	}

	return nil
}

// AddLastUpdatedByUsers adds the given related objects to the existing relationships
// of the user, optionally inserting them as new records.
// Appends related to o.R.LastUpdatedByUsers.
// Sets related.R.LastUpdatedByUser appropriately.
func (o *User) AddLastUpdatedByUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.LastUpdatedBy, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `user` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"last_updated_by"}),
				strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.LastUpdatedBy, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userR{
			LastUpdatedByUsers: related,
		}
	} else {
		o.R.LastUpdatedByUsers = append(o.R.LastUpdatedByUsers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &userR{
				LastUpdatedByUser: o,
			}
		} else {
			rel.R.LastUpdatedByUser = o
		}
	}
	return nil
}

// SetLastUpdatedByUsers removes all previously related items of the
// user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.LastUpdatedByUser's LastUpdatedByUsers accordingly.
// Replaces o.R.LastUpdatedByUsers with related.
// Sets related.R.LastUpdatedByUser's LastUpdatedByUsers accordingly.
func (o *User) SetLastUpdatedByUsers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*User) error {
	query := "update `user` set `last_updated_by` = null where `last_updated_by` = ?"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.LastUpdatedByUsers {
			queries.SetScanner(&rel.LastUpdatedBy, nil)
			if rel.R == nil {
				continue
			}

			rel.R.LastUpdatedByUser = nil
		}
		o.R.LastUpdatedByUsers = nil
	}

	return o.AddLastUpdatedByUsers(ctx, exec, insert, related...)
}

// RemoveLastUpdatedByUsers relationships from objects passed in.
// Removes related items from R.LastUpdatedByUsers (uses pointer comparison, removal does not keep order)
// Sets related.R.LastUpdatedByUser.
func (o *User) RemoveLastUpdatedByUsers(ctx context.Context, exec boil.ContextExecutor, related ...*User) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.LastUpdatedBy, nil)
		if rel.R != nil {
			rel.R.LastUpdatedByUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("last_updated_by")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.LastUpdatedByUsers {
			if rel != ri {
				continue
			}

			ln := len(o.R.LastUpdatedByUsers)
			if ln > 1 && i < ln-1 {
				o.R.LastUpdatedByUsers[i] = o.R.LastUpdatedByUsers[ln-1]
			}
			o.R.LastUpdatedByUsers = o.R.LastUpdatedByUsers[:ln-1]
			break
		}
	}

	return nil
}

// Users retrieves all the records using an executor.
func Users(mods ...qm.QueryMod) userQuery {
	mods = append(mods, qm.From("`user`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`user`.*"})
	}

	return userQuery{q}
}

// FindUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUser(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*User, error) {
	userObj := &User{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysqlmodel: unable to select from user")
	}

	return userObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *User) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysqlmodel: no user provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userInsertCacheMut.RLock()
	cache, cached := userInsertCache[key]
	userInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userType, userMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to insert into user")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to populate default values for user")
	}

CacheNoHooks:
	if !cached {
		userInsertCacheMut.Lock()
		userInsertCache[key] = cache
		userInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the User.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *User) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	userUpdateCacheMut.RLock()
	cache, cached := userUpdateCache[key]
	userUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("mysqlmodel: unable to update user, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userType, userMapping, append(wl, userPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to update user row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by update for user")
	}

	if !cached {
		userUpdateCacheMut.Lock()
		userUpdateCache[key] = cache
		userUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to update all for user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to retrieve rows affected for user")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysqlmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to update all in user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to retrieve rows affected all in update all user")
	}
	return rowsAff, nil
}

var mySQLUserUniqueColumns = []string{
	"id",
	"email",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *User) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysqlmodel: no user provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(userColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userUpsertCacheMut.RLock()
	cache, cached := userUpsertCache[key]
	userUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userAllColumns,
			userColumnsWithDefault,
			userColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userAllColumns,
			userPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysqlmodel: unable to upsert user, could not build update column list")
		}

		ret := strmangle.SetComplement(userAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`user`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userType, userMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userType, userMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to upsert for user")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == userMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userType, userMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to retrieve unique values for user")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to populate default values for user")
	}

CacheNoHooks:
	if !cached {
		userUpsertCacheMut.Lock()
		userUpsertCache[key] = cache
		userUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single User record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *User) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysqlmodel: no User provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userPrimaryKeyMapping)
	sql := "DELETE FROM `user` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to delete from user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by delete for user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysqlmodel: no userQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to delete all from user")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by deleteall for user")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to delete all from user slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by deleteall for user")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *User) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUser(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user`.* FROM `user` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to reload all in UserSlice")
	}

	*o = slice

	return nil
}

// UserExists checks if the User row exists.
func UserExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysqlmodel: unable to check if user exists")
	}

	return exists, nil
}

// Exists checks if the User row exists.
func (o *User) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserExists(ctx, exec, o.ID)
}
