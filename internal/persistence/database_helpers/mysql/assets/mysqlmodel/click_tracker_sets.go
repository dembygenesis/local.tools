// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package mysqlmodel

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// ClickTrackerSet is an object representing the database table.
type ClickTrackerSet struct {
	ID             int      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name           string   `boil:"name" json:"name" toml:"name" yaml:"name"`
	URLName        string   `boil:"url_name" json:"url_name" toml:"url_name" yaml:"url_name"`
	CreatedBy      null.Int `boil:"created_by" json:"created_by,omitempty" toml:"created_by" yaml:"created_by,omitempty"`
	UpdatedBy      null.Int `boil:"updated_by" json:"updated_by,omitempty" toml:"updated_by" yaml:"updated_by,omitempty"`
	OrganizationID null.Int `boil:"organization_id" json:"organization_id,omitempty" toml:"organization_id" yaml:"organization_id,omitempty"`
	// Processed by worker queue
	AnalyticsNumberOfLinks null.Int  `boil:"analytics_number_of_links" json:"analytics_number_of_links,omitempty" toml:"analytics_number_of_links" yaml:"analytics_number_of_links,omitempty"`
	AnalyticsLastUpdatedAt null.Time `boil:"analytics_last_updated_at" json:"analytics_last_updated_at,omitempty" toml:"analytics_last_updated_at" yaml:"analytics_last_updated_at,omitempty"`
	CreatedAt              null.Time `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt              null.Time `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	DeletedAt              null.Time `boil:"deleted_at" json:"deleted_at,omitempty" toml:"deleted_at" yaml:"deleted_at,omitempty"`

	R *clickTrackerSetR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L clickTrackerSetL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ClickTrackerSetColumns = struct {
	ID                     string
	Name                   string
	URLName                string
	CreatedBy              string
	UpdatedBy              string
	OrganizationID         string
	AnalyticsNumberOfLinks string
	AnalyticsLastUpdatedAt string
	CreatedAt              string
	UpdatedAt              string
	DeletedAt              string
}{
	ID:                     "id",
	Name:                   "name",
	URLName:                "url_name",
	CreatedBy:              "created_by",
	UpdatedBy:              "updated_by",
	OrganizationID:         "organization_id",
	AnalyticsNumberOfLinks: "analytics_number_of_links",
	AnalyticsLastUpdatedAt: "analytics_last_updated_at",
	CreatedAt:              "created_at",
	UpdatedAt:              "updated_at",
	DeletedAt:              "deleted_at",
}

var ClickTrackerSetTableColumns = struct {
	ID                     string
	Name                   string
	URLName                string
	CreatedBy              string
	UpdatedBy              string
	OrganizationID         string
	AnalyticsNumberOfLinks string
	AnalyticsLastUpdatedAt string
	CreatedAt              string
	UpdatedAt              string
	DeletedAt              string
}{
	ID:                     "click_tracker_sets.id",
	Name:                   "click_tracker_sets.name",
	URLName:                "click_tracker_sets.url_name",
	CreatedBy:              "click_tracker_sets.created_by",
	UpdatedBy:              "click_tracker_sets.updated_by",
	OrganizationID:         "click_tracker_sets.organization_id",
	AnalyticsNumberOfLinks: "click_tracker_sets.analytics_number_of_links",
	AnalyticsLastUpdatedAt: "click_tracker_sets.analytics_last_updated_at",
	CreatedAt:              "click_tracker_sets.created_at",
	UpdatedAt:              "click_tracker_sets.updated_at",
	DeletedAt:              "click_tracker_sets.deleted_at",
}

// Generated where

var ClickTrackerSetWhere = struct {
	ID                     whereHelperint
	Name                   whereHelperstring
	URLName                whereHelperstring
	CreatedBy              whereHelpernull_Int
	UpdatedBy              whereHelpernull_Int
	OrganizationID         whereHelpernull_Int
	AnalyticsNumberOfLinks whereHelpernull_Int
	AnalyticsLastUpdatedAt whereHelpernull_Time
	CreatedAt              whereHelpernull_Time
	UpdatedAt              whereHelpernull_Time
	DeletedAt              whereHelpernull_Time
}{
	ID:                     whereHelperint{field: "`click_tracker_sets`.`id`"},
	Name:                   whereHelperstring{field: "`click_tracker_sets`.`name`"},
	URLName:                whereHelperstring{field: "`click_tracker_sets`.`url_name`"},
	CreatedBy:              whereHelpernull_Int{field: "`click_tracker_sets`.`created_by`"},
	UpdatedBy:              whereHelpernull_Int{field: "`click_tracker_sets`.`updated_by`"},
	OrganizationID:         whereHelpernull_Int{field: "`click_tracker_sets`.`organization_id`"},
	AnalyticsNumberOfLinks: whereHelpernull_Int{field: "`click_tracker_sets`.`analytics_number_of_links`"},
	AnalyticsLastUpdatedAt: whereHelpernull_Time{field: "`click_tracker_sets`.`analytics_last_updated_at`"},
	CreatedAt:              whereHelpernull_Time{field: "`click_tracker_sets`.`created_at`"},
	UpdatedAt:              whereHelpernull_Time{field: "`click_tracker_sets`.`updated_at`"},
	DeletedAt:              whereHelpernull_Time{field: "`click_tracker_sets`.`deleted_at`"},
}

// ClickTrackerSetRels is where relationship names are stored.
var ClickTrackerSetRels = struct {
	CreatedByUser string
	UpdatedByUser string
	Organization  string
	ClickTrackers string
}{
	CreatedByUser: "CreatedByUser",
	UpdatedByUser: "UpdatedByUser",
	Organization:  "Organization",
	ClickTrackers: "ClickTrackers",
}

// clickTrackerSetR is where relationships are stored.
type clickTrackerSetR struct {
	CreatedByUser *User             `boil:"CreatedByUser" json:"CreatedByUser" toml:"CreatedByUser" yaml:"CreatedByUser"`
	UpdatedByUser *User             `boil:"UpdatedByUser" json:"UpdatedByUser" toml:"UpdatedByUser" yaml:"UpdatedByUser"`
	Organization  *Organization     `boil:"Organization" json:"Organization" toml:"Organization" yaml:"Organization"`
	ClickTrackers ClickTrackerSlice `boil:"ClickTrackers" json:"ClickTrackers" toml:"ClickTrackers" yaml:"ClickTrackers"`
}

// NewStruct creates a new relationship struct
func (*clickTrackerSetR) NewStruct() *clickTrackerSetR {
	return &clickTrackerSetR{}
}

func (r *clickTrackerSetR) GetCreatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.CreatedByUser
}

func (r *clickTrackerSetR) GetUpdatedByUser() *User {
	if r == nil {
		return nil
	}
	return r.UpdatedByUser
}

func (r *clickTrackerSetR) GetOrganization() *Organization {
	if r == nil {
		return nil
	}
	return r.Organization
}

func (r *clickTrackerSetR) GetClickTrackers() ClickTrackerSlice {
	if r == nil {
		return nil
	}
	return r.ClickTrackers
}

// clickTrackerSetL is where Load methods for each relationship are stored.
type clickTrackerSetL struct{}

var (
	clickTrackerSetAllColumns            = []string{"id", "name", "url_name", "created_by", "updated_by", "organization_id", "analytics_number_of_links", "analytics_last_updated_at", "created_at", "updated_at", "deleted_at"}
	clickTrackerSetColumnsWithoutDefault = []string{"name", "url_name", "created_by", "updated_by", "organization_id", "created_at", "updated_at", "deleted_at"}
	clickTrackerSetColumnsWithDefault    = []string{"id", "analytics_number_of_links", "analytics_last_updated_at"}
	clickTrackerSetPrimaryKeyColumns     = []string{"id"}
	clickTrackerSetGeneratedColumns      = []string{}
)

type (
	// ClickTrackerSetSlice is an alias for a slice of pointers to ClickTrackerSet.
	// This should almost always be used instead of []ClickTrackerSet.
	ClickTrackerSetSlice []*ClickTrackerSet

	clickTrackerSetQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	clickTrackerSetType                 = reflect.TypeOf(&ClickTrackerSet{})
	clickTrackerSetMapping              = queries.MakeStructMapping(clickTrackerSetType)
	clickTrackerSetPrimaryKeyMapping, _ = queries.BindMapping(clickTrackerSetType, clickTrackerSetMapping, clickTrackerSetPrimaryKeyColumns)
	clickTrackerSetInsertCacheMut       sync.RWMutex
	clickTrackerSetInsertCache          = make(map[string]insertCache)
	clickTrackerSetUpdateCacheMut       sync.RWMutex
	clickTrackerSetUpdateCache          = make(map[string]updateCache)
	clickTrackerSetUpsertCacheMut       sync.RWMutex
	clickTrackerSetUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single clickTrackerSet record from the query.
func (q clickTrackerSetQuery) One(ctx context.Context, exec boil.ContextExecutor) (*ClickTrackerSet, error) {
	o := &ClickTrackerSet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysqlmodel: failed to execute a one query for click_tracker_sets")
	}

	return o, nil
}

// All returns all ClickTrackerSet records from the query.
func (q clickTrackerSetQuery) All(ctx context.Context, exec boil.ContextExecutor) (ClickTrackerSetSlice, error) {
	var o []*ClickTrackerSet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "mysqlmodel: failed to assign all query results to ClickTrackerSet slice")
	}

	return o, nil
}

// Count returns the count of all ClickTrackerSet records in the query.
func (q clickTrackerSetQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to count click_tracker_sets rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q clickTrackerSetQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "mysqlmodel: failed to check if click_tracker_sets exists")
	}

	return count > 0, nil
}

// CreatedByUser pointed to by the foreign key.
func (o *ClickTrackerSet) CreatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.CreatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// UpdatedByUser pointed to by the foreign key.
func (o *ClickTrackerSet) UpdatedByUser(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.UpdatedBy),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// Organization pointed to by the foreign key.
func (o *ClickTrackerSet) Organization(mods ...qm.QueryMod) organizationQuery {
	queryMods := []qm.QueryMod{
		qm.Where("`id` = ?", o.OrganizationID),
	}

	queryMods = append(queryMods, mods...)

	return Organizations(queryMods...)
}

// ClickTrackers retrieves all the click_tracker's ClickTrackers with an executor.
func (o *ClickTrackerSet) ClickTrackers(mods ...qm.QueryMod) clickTrackerQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("`click_trackers`.`click_tracker_set_id`=?", o.ID),
	)

	return ClickTrackers(queryMods...)
}

// LoadCreatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clickTrackerSetL) LoadCreatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClickTrackerSet interface{}, mods queries.Applicator) error {
	var slice []*ClickTrackerSet
	var object *ClickTrackerSet

	if singular {
		var ok bool
		object, ok = maybeClickTrackerSet.(*ClickTrackerSet)
		if !ok {
			object = new(ClickTrackerSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeClickTrackerSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeClickTrackerSet))
			}
		}
	} else {
		s, ok := maybeClickTrackerSet.(*[]*ClickTrackerSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeClickTrackerSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeClickTrackerSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &clickTrackerSetR{}
		}
		if !queries.IsNil(object.CreatedBy) {
			args[object.CreatedBy] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clickTrackerSetR{}
			}

			if !queries.IsNil(obj.CreatedBy) {
				args[obj.CreatedBy] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CreatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CreatedByClickTrackerSets = append(foreign.R.CreatedByClickTrackerSets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CreatedBy, foreign.ID) {
				local.R.CreatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CreatedByClickTrackerSets = append(foreign.R.CreatedByClickTrackerSets, local)
				break
			}
		}
	}

	return nil
}

// LoadUpdatedByUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clickTrackerSetL) LoadUpdatedByUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClickTrackerSet interface{}, mods queries.Applicator) error {
	var slice []*ClickTrackerSet
	var object *ClickTrackerSet

	if singular {
		var ok bool
		object, ok = maybeClickTrackerSet.(*ClickTrackerSet)
		if !ok {
			object = new(ClickTrackerSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeClickTrackerSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeClickTrackerSet))
			}
		}
	} else {
		s, ok := maybeClickTrackerSet.(*[]*ClickTrackerSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeClickTrackerSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeClickTrackerSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &clickTrackerSetR{}
		}
		if !queries.IsNil(object.UpdatedBy) {
			args[object.UpdatedBy] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clickTrackerSetR{}
			}

			if !queries.IsNil(obj.UpdatedBy) {
				args[obj.UpdatedBy] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user`),
		qm.WhereIn(`user.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.UpdatedByUser = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UpdatedByClickTrackerSets = append(foreign.R.UpdatedByClickTrackerSets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.UpdatedBy, foreign.ID) {
				local.R.UpdatedByUser = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UpdatedByClickTrackerSets = append(foreign.R.UpdatedByClickTrackerSets, local)
				break
			}
		}
	}

	return nil
}

// LoadOrganization allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (clickTrackerSetL) LoadOrganization(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClickTrackerSet interface{}, mods queries.Applicator) error {
	var slice []*ClickTrackerSet
	var object *ClickTrackerSet

	if singular {
		var ok bool
		object, ok = maybeClickTrackerSet.(*ClickTrackerSet)
		if !ok {
			object = new(ClickTrackerSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeClickTrackerSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeClickTrackerSet))
			}
		}
	} else {
		s, ok := maybeClickTrackerSet.(*[]*ClickTrackerSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeClickTrackerSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeClickTrackerSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &clickTrackerSetR{}
		}
		if !queries.IsNil(object.OrganizationID) {
			args[object.OrganizationID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clickTrackerSetR{}
			}

			if !queries.IsNil(obj.OrganizationID) {
				args[obj.OrganizationID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`organization`),
		qm.WhereIn(`organization.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Organization")
	}

	var resultSlice []*Organization
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Organization")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for organization")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for organization")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Organization = foreign
		if foreign.R == nil {
			foreign.R = &organizationR{}
		}
		foreign.R.ClickTrackerSets = append(foreign.R.ClickTrackerSets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.OrganizationID, foreign.ID) {
				local.R.Organization = foreign
				if foreign.R == nil {
					foreign.R = &organizationR{}
				}
				foreign.R.ClickTrackerSets = append(foreign.R.ClickTrackerSets, local)
				break
			}
		}
	}

	return nil
}

// LoadClickTrackers allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (clickTrackerSetL) LoadClickTrackers(ctx context.Context, e boil.ContextExecutor, singular bool, maybeClickTrackerSet interface{}, mods queries.Applicator) error {
	var slice []*ClickTrackerSet
	var object *ClickTrackerSet

	if singular {
		var ok bool
		object, ok = maybeClickTrackerSet.(*ClickTrackerSet)
		if !ok {
			object = new(ClickTrackerSet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeClickTrackerSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeClickTrackerSet))
			}
		}
	} else {
		s, ok := maybeClickTrackerSet.(*[]*ClickTrackerSet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeClickTrackerSet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeClickTrackerSet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &clickTrackerSetR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &clickTrackerSetR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`click_trackers`),
		qm.WhereIn(`click_trackers.click_tracker_set_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load click_trackers")
	}

	var resultSlice []*ClickTracker
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice click_trackers")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on click_trackers")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for click_trackers")
	}

	if singular {
		object.R.ClickTrackers = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &clickTrackerR{}
			}
			foreign.R.ClickTrackerSet = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ClickTrackerSetID {
				local.R.ClickTrackers = append(local.R.ClickTrackers, foreign)
				if foreign.R == nil {
					foreign.R = &clickTrackerR{}
				}
				foreign.R.ClickTrackerSet = local
				break
			}
		}
	}

	return nil
}

// SetCreatedByUser of the clickTrackerSet to the related item.
// Sets o.R.CreatedByUser to related.
// Adds o to related.R.CreatedByClickTrackerSets.
func (o *ClickTrackerSet) SetCreatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `click_tracker_sets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"created_by"}),
		strmangle.WhereClause("`", "`", 0, clickTrackerSetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CreatedBy, related.ID)
	if o.R == nil {
		o.R = &clickTrackerSetR{
			CreatedByUser: related,
		}
	} else {
		o.R.CreatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			CreatedByClickTrackerSets: ClickTrackerSetSlice{o},
		}
	} else {
		related.R.CreatedByClickTrackerSets = append(related.R.CreatedByClickTrackerSets, o)
	}

	return nil
}

// RemoveCreatedByUser relationship.
// Sets o.R.CreatedByUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ClickTrackerSet) RemoveCreatedByUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.CreatedBy, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("created_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CreatedByUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CreatedByClickTrackerSets {
		if queries.Equal(o.CreatedBy, ri.CreatedBy) {
			continue
		}

		ln := len(related.R.CreatedByClickTrackerSets)
		if ln > 1 && i < ln-1 {
			related.R.CreatedByClickTrackerSets[i] = related.R.CreatedByClickTrackerSets[ln-1]
		}
		related.R.CreatedByClickTrackerSets = related.R.CreatedByClickTrackerSets[:ln-1]
		break
	}
	return nil
}

// SetUpdatedByUser of the clickTrackerSet to the related item.
// Sets o.R.UpdatedByUser to related.
// Adds o to related.R.UpdatedByClickTrackerSets.
func (o *ClickTrackerSet) SetUpdatedByUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `click_tracker_sets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"updated_by"}),
		strmangle.WhereClause("`", "`", 0, clickTrackerSetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.UpdatedBy, related.ID)
	if o.R == nil {
		o.R = &clickTrackerSetR{
			UpdatedByUser: related,
		}
	} else {
		o.R.UpdatedByUser = related
	}

	if related.R == nil {
		related.R = &userR{
			UpdatedByClickTrackerSets: ClickTrackerSetSlice{o},
		}
	} else {
		related.R.UpdatedByClickTrackerSets = append(related.R.UpdatedByClickTrackerSets, o)
	}

	return nil
}

// RemoveUpdatedByUser relationship.
// Sets o.R.UpdatedByUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ClickTrackerSet) RemoveUpdatedByUser(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.UpdatedBy, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("updated_by")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.UpdatedByUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.UpdatedByClickTrackerSets {
		if queries.Equal(o.UpdatedBy, ri.UpdatedBy) {
			continue
		}

		ln := len(related.R.UpdatedByClickTrackerSets)
		if ln > 1 && i < ln-1 {
			related.R.UpdatedByClickTrackerSets[i] = related.R.UpdatedByClickTrackerSets[ln-1]
		}
		related.R.UpdatedByClickTrackerSets = related.R.UpdatedByClickTrackerSets[:ln-1]
		break
	}
	return nil
}

// SetOrganization of the clickTrackerSet to the related item.
// Sets o.R.Organization to related.
// Adds o to related.R.ClickTrackerSets.
func (o *ClickTrackerSet) SetOrganization(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Organization) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE `click_tracker_sets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, []string{"organization_id"}),
		strmangle.WhereClause("`", "`", 0, clickTrackerSetPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.OrganizationID, related.ID)
	if o.R == nil {
		o.R = &clickTrackerSetR{
			Organization: related,
		}
	} else {
		o.R.Organization = related
	}

	if related.R == nil {
		related.R = &organizationR{
			ClickTrackerSets: ClickTrackerSetSlice{o},
		}
	} else {
		related.R.ClickTrackerSets = append(related.R.ClickTrackerSets, o)
	}

	return nil
}

// RemoveOrganization relationship.
// Sets o.R.Organization to nil.
// Removes o from all passed in related items' relationships struct.
func (o *ClickTrackerSet) RemoveOrganization(ctx context.Context, exec boil.ContextExecutor, related *Organization) error {
	var err error

	queries.SetScanner(&o.OrganizationID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("organization_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.Organization = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.ClickTrackerSets {
		if queries.Equal(o.OrganizationID, ri.OrganizationID) {
			continue
		}

		ln := len(related.R.ClickTrackerSets)
		if ln > 1 && i < ln-1 {
			related.R.ClickTrackerSets[i] = related.R.ClickTrackerSets[ln-1]
		}
		related.R.ClickTrackerSets = related.R.ClickTrackerSets[:ln-1]
		break
	}
	return nil
}

// AddClickTrackers adds the given related objects to the existing relationships
// of the click_tracker_set, optionally inserting them as new records.
// Appends related to o.R.ClickTrackers.
// Sets related.R.ClickTrackerSet appropriately.
func (o *ClickTrackerSet) AddClickTrackers(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*ClickTracker) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ClickTrackerSetID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE `click_trackers` SET %s WHERE %s",
				strmangle.SetParamNames("`", "`", 0, []string{"click_tracker_set_id"}),
				strmangle.WhereClause("`", "`", 0, clickTrackerPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ClickTrackerSetID = o.ID
		}
	}

	if o.R == nil {
		o.R = &clickTrackerSetR{
			ClickTrackers: related,
		}
	} else {
		o.R.ClickTrackers = append(o.R.ClickTrackers, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &clickTrackerR{
				ClickTrackerSet: o,
			}
		} else {
			rel.R.ClickTrackerSet = o
		}
	}
	return nil
}

// ClickTrackerSets retrieves all the records using an executor.
func ClickTrackerSets(mods ...qm.QueryMod) clickTrackerSetQuery {
	mods = append(mods, qm.From("`click_tracker_sets`"))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"`click_tracker_sets`.*"})
	}

	return clickTrackerSetQuery{q}
}

// FindClickTrackerSet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindClickTrackerSet(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*ClickTrackerSet, error) {
	clickTrackerSetObj := &ClickTrackerSet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `click_tracker_sets` where `id`=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, clickTrackerSetObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "mysqlmodel: unable to select from click_tracker_sets")
	}

	return clickTrackerSetObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *ClickTrackerSet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("mysqlmodel: no click_tracker_sets provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	nzDefaults := queries.NonZeroDefaultSet(clickTrackerSetColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	clickTrackerSetInsertCacheMut.RLock()
	cache, cached := clickTrackerSetInsertCache[key]
	clickTrackerSetInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			clickTrackerSetAllColumns,
			clickTrackerSetColumnsWithDefault,
			clickTrackerSetColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(clickTrackerSetType, clickTrackerSetMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(clickTrackerSetType, clickTrackerSetMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `click_tracker_sets` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `click_tracker_sets` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `click_tracker_sets` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, clickTrackerSetPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to insert into click_tracker_sets")
	}

	var lastID int64
	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == clickTrackerSetMapping["id"] {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.ID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to populate default values for click_tracker_sets")
	}

CacheNoHooks:
	if !cached {
		clickTrackerSetInsertCacheMut.Lock()
		clickTrackerSetInsertCache[key] = cache
		clickTrackerSetInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the ClickTrackerSet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *ClickTrackerSet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	key := makeCacheKey(columns, nil)
	clickTrackerSetUpdateCacheMut.RLock()
	cache, cached := clickTrackerSetUpdateCache[key]
	clickTrackerSetUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			clickTrackerSetAllColumns,
			clickTrackerSetPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("mysqlmodel: unable to update click_tracker_sets, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `click_tracker_sets` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, clickTrackerSetPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(clickTrackerSetType, clickTrackerSetMapping, append(wl, clickTrackerSetPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to update click_tracker_sets row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by update for click_tracker_sets")
	}

	if !cached {
		clickTrackerSetUpdateCacheMut.Lock()
		clickTrackerSetUpdateCache[key] = cache
		clickTrackerSetUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q clickTrackerSetQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to update all for click_tracker_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to retrieve rows affected for click_tracker_sets")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ClickTrackerSetSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("mysqlmodel: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clickTrackerSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `click_tracker_sets` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clickTrackerSetPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to update all in clickTrackerSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to retrieve rows affected all in update all clickTrackerSet")
	}
	return rowsAff, nil
}

var mySQLClickTrackerSetUniqueColumns = []string{
	"id",
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *ClickTrackerSet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("mysqlmodel: no click_tracker_sets provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(clickTrackerSetColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLClickTrackerSetUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	clickTrackerSetUpsertCacheMut.RLock()
	cache, cached := clickTrackerSetUpsertCache[key]
	clickTrackerSetUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			clickTrackerSetAllColumns,
			clickTrackerSetColumnsWithDefault,
			clickTrackerSetColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			clickTrackerSetAllColumns,
			clickTrackerSetPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("mysqlmodel: unable to upsert click_tracker_sets, could not build update column list")
		}

		ret := strmangle.SetComplement(clickTrackerSetAllColumns, strmangle.SetIntersect(insert, update))

		cache.query = buildUpsertQueryMySQL(dialect, "`click_tracker_sets`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `click_tracker_sets` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(clickTrackerSetType, clickTrackerSetMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(clickTrackerSetType, clickTrackerSetMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	result, err := exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to upsert for click_tracker_sets")
	}

	var lastID int64
	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	lastID, err = result.LastInsertId()
	if err != nil {
		return ErrSyncFail
	}

	o.ID = int(lastID)
	if lastID != 0 && len(cache.retMapping) == 1 && cache.retMapping[0] == clickTrackerSetMapping["id"] {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(clickTrackerSetType, clickTrackerSetMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to retrieve unique values for click_tracker_sets")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to populate default values for click_tracker_sets")
	}

CacheNoHooks:
	if !cached {
		clickTrackerSetUpsertCacheMut.Lock()
		clickTrackerSetUpsertCache[key] = cache
		clickTrackerSetUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single ClickTrackerSet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *ClickTrackerSet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("mysqlmodel: no ClickTrackerSet provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), clickTrackerSetPrimaryKeyMapping)
	sql := "DELETE FROM `click_tracker_sets` WHERE `id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to delete from click_tracker_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by delete for click_tracker_sets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q clickTrackerSetQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("mysqlmodel: no clickTrackerSetQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to delete all from click_tracker_sets")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by deleteall for click_tracker_sets")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ClickTrackerSetSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clickTrackerSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `click_tracker_sets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clickTrackerSetPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: unable to delete all from clickTrackerSet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "mysqlmodel: failed to get rows affected by deleteall for click_tracker_sets")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *ClickTrackerSet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindClickTrackerSet(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ClickTrackerSetSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ClickTrackerSetSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), clickTrackerSetPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `click_tracker_sets`.* FROM `click_tracker_sets` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, clickTrackerSetPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "mysqlmodel: unable to reload all in ClickTrackerSetSlice")
	}

	*o = slice

	return nil
}

// ClickTrackerSetExists checks if the ClickTrackerSet row exists.
func ClickTrackerSetExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `click_tracker_sets` where `id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "mysqlmodel: unable to check if click_tracker_sets exists")
	}

	return exists, nil
}

// Exists checks if the ClickTrackerSet row exists.
func (o *ClickTrackerSet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return ClickTrackerSetExists(ctx, exec, o.ID)
}
