// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"context"
	"sync"

	"github.com/dembygenesis/local.tools/internal/model"
)

type FakeClickTrackerService struct {
	CreateClickTrackerStub        func(context.Context, *model.CreateClickTracker) (*model.ClickTracker, error)
	createClickTrackerMutex       sync.RWMutex
	createClickTrackerArgsForCall []struct {
		arg1 context.Context
		arg2 *model.CreateClickTracker
	}
	createClickTrackerReturns struct {
		result1 *model.ClickTracker
		result2 error
	}
	createClickTrackerReturnsOnCall map[int]struct {
		result1 *model.ClickTracker
		result2 error
	}
	DeleteClickTrackerStub        func(context.Context, *model.DeleteClickTracker) error
	deleteClickTrackerMutex       sync.RWMutex
	deleteClickTrackerArgsForCall []struct {
		arg1 context.Context
		arg2 *model.DeleteClickTracker
	}
	deleteClickTrackerReturns struct {
		result1 error
	}
	deleteClickTrackerReturnsOnCall map[int]struct {
		result1 error
	}
	GetClickTrackerByIDStub        func(context.Context, int) (*model.ClickTracker, error)
	getClickTrackerByIDMutex       sync.RWMutex
	getClickTrackerByIDArgsForCall []struct {
		arg1 context.Context
		arg2 int
	}
	getClickTrackerByIDReturns struct {
		result1 *model.ClickTracker
		result2 error
	}
	getClickTrackerByIDReturnsOnCall map[int]struct {
		result1 *model.ClickTracker
		result2 error
	}
	ListClickTrackersStub        func(context.Context, *model.ClickTrackerFilters) (*model.PaginatedClickTrackers, error)
	listClickTrackersMutex       sync.RWMutex
	listClickTrackersArgsForCall []struct {
		arg1 context.Context
		arg2 *model.ClickTrackerFilters
	}
	listClickTrackersReturns struct {
		result1 *model.PaginatedClickTrackers
		result2 error
	}
	listClickTrackersReturnsOnCall map[int]struct {
		result1 *model.PaginatedClickTrackers
		result2 error
	}
	RestoreClickTrackerStub        func(context.Context, *model.RestoreClickTracker) error
	restoreClickTrackerMutex       sync.RWMutex
	restoreClickTrackerArgsForCall []struct {
		arg1 context.Context
		arg2 *model.RestoreClickTracker
	}
	restoreClickTrackerReturns struct {
		result1 error
	}
	restoreClickTrackerReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateClickTrackerStub        func(context.Context, *model.UpdateClickTracker) (*model.ClickTracker, error)
	updateClickTrackerMutex       sync.RWMutex
	updateClickTrackerArgsForCall []struct {
		arg1 context.Context
		arg2 *model.UpdateClickTracker
	}
	updateClickTrackerReturns struct {
		result1 *model.ClickTracker
		result2 error
	}
	updateClickTrackerReturnsOnCall map[int]struct {
		result1 *model.ClickTracker
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClickTrackerService) CreateClickTracker(arg1 context.Context, arg2 *model.CreateClickTracker) (*model.ClickTracker, error) {
	fake.createClickTrackerMutex.Lock()
	ret, specificReturn := fake.createClickTrackerReturnsOnCall[len(fake.createClickTrackerArgsForCall)]
	fake.createClickTrackerArgsForCall = append(fake.createClickTrackerArgsForCall, struct {
		arg1 context.Context
		arg2 *model.CreateClickTracker
	}{arg1, arg2})
	stub := fake.CreateClickTrackerStub
	fakeReturns := fake.createClickTrackerReturns
	fake.recordInvocation("CreateClickTracker", []interface{}{arg1, arg2})
	fake.createClickTrackerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClickTrackerService) CreateClickTrackerCallCount() int {
	fake.createClickTrackerMutex.RLock()
	defer fake.createClickTrackerMutex.RUnlock()
	return len(fake.createClickTrackerArgsForCall)
}

func (fake *FakeClickTrackerService) CreateClickTrackerCalls(stub func(context.Context, *model.CreateClickTracker) (*model.ClickTracker, error)) {
	fake.createClickTrackerMutex.Lock()
	defer fake.createClickTrackerMutex.Unlock()
	fake.CreateClickTrackerStub = stub
}

func (fake *FakeClickTrackerService) CreateClickTrackerArgsForCall(i int) (context.Context, *model.CreateClickTracker) {
	fake.createClickTrackerMutex.RLock()
	defer fake.createClickTrackerMutex.RUnlock()
	argsForCall := fake.createClickTrackerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClickTrackerService) CreateClickTrackerReturns(result1 *model.ClickTracker, result2 error) {
	fake.createClickTrackerMutex.Lock()
	defer fake.createClickTrackerMutex.Unlock()
	fake.CreateClickTrackerStub = nil
	fake.createClickTrackerReturns = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakeClickTrackerService) CreateClickTrackerReturnsOnCall(i int, result1 *model.ClickTracker, result2 error) {
	fake.createClickTrackerMutex.Lock()
	defer fake.createClickTrackerMutex.Unlock()
	fake.CreateClickTrackerStub = nil
	if fake.createClickTrackerReturnsOnCall == nil {
		fake.createClickTrackerReturnsOnCall = make(map[int]struct {
			result1 *model.ClickTracker
			result2 error
		})
	}
	fake.createClickTrackerReturnsOnCall[i] = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakeClickTrackerService) DeleteClickTracker(arg1 context.Context, arg2 *model.DeleteClickTracker) error {
	fake.deleteClickTrackerMutex.Lock()
	ret, specificReturn := fake.deleteClickTrackerReturnsOnCall[len(fake.deleteClickTrackerArgsForCall)]
	fake.deleteClickTrackerArgsForCall = append(fake.deleteClickTrackerArgsForCall, struct {
		arg1 context.Context
		arg2 *model.DeleteClickTracker
	}{arg1, arg2})
	stub := fake.DeleteClickTrackerStub
	fakeReturns := fake.deleteClickTrackerReturns
	fake.recordInvocation("DeleteClickTracker", []interface{}{arg1, arg2})
	fake.deleteClickTrackerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClickTrackerService) DeleteClickTrackerCallCount() int {
	fake.deleteClickTrackerMutex.RLock()
	defer fake.deleteClickTrackerMutex.RUnlock()
	return len(fake.deleteClickTrackerArgsForCall)
}

func (fake *FakeClickTrackerService) DeleteClickTrackerCalls(stub func(context.Context, *model.DeleteClickTracker) error) {
	fake.deleteClickTrackerMutex.Lock()
	defer fake.deleteClickTrackerMutex.Unlock()
	fake.DeleteClickTrackerStub = stub
}

func (fake *FakeClickTrackerService) DeleteClickTrackerArgsForCall(i int) (context.Context, *model.DeleteClickTracker) {
	fake.deleteClickTrackerMutex.RLock()
	defer fake.deleteClickTrackerMutex.RUnlock()
	argsForCall := fake.deleteClickTrackerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClickTrackerService) DeleteClickTrackerReturns(result1 error) {
	fake.deleteClickTrackerMutex.Lock()
	defer fake.deleteClickTrackerMutex.Unlock()
	fake.DeleteClickTrackerStub = nil
	fake.deleteClickTrackerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClickTrackerService) DeleteClickTrackerReturnsOnCall(i int, result1 error) {
	fake.deleteClickTrackerMutex.Lock()
	defer fake.deleteClickTrackerMutex.Unlock()
	fake.DeleteClickTrackerStub = nil
	if fake.deleteClickTrackerReturnsOnCall == nil {
		fake.deleteClickTrackerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteClickTrackerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClickTrackerService) GetClickTrackerByID(arg1 context.Context, arg2 int) (*model.ClickTracker, error) {
	fake.getClickTrackerByIDMutex.Lock()
	ret, specificReturn := fake.getClickTrackerByIDReturnsOnCall[len(fake.getClickTrackerByIDArgsForCall)]
	fake.getClickTrackerByIDArgsForCall = append(fake.getClickTrackerByIDArgsForCall, struct {
		arg1 context.Context
		arg2 int
	}{arg1, arg2})
	stub := fake.GetClickTrackerByIDStub
	fakeReturns := fake.getClickTrackerByIDReturns
	fake.recordInvocation("GetClickTrackerByID", []interface{}{arg1, arg2})
	fake.getClickTrackerByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClickTrackerService) GetClickTrackerByIDCallCount() int {
	fake.getClickTrackerByIDMutex.RLock()
	defer fake.getClickTrackerByIDMutex.RUnlock()
	return len(fake.getClickTrackerByIDArgsForCall)
}

func (fake *FakeClickTrackerService) GetClickTrackerByIDCalls(stub func(context.Context, int) (*model.ClickTracker, error)) {
	fake.getClickTrackerByIDMutex.Lock()
	defer fake.getClickTrackerByIDMutex.Unlock()
	fake.GetClickTrackerByIDStub = stub
}

func (fake *FakeClickTrackerService) GetClickTrackerByIDArgsForCall(i int) (context.Context, int) {
	fake.getClickTrackerByIDMutex.RLock()
	defer fake.getClickTrackerByIDMutex.RUnlock()
	argsForCall := fake.getClickTrackerByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClickTrackerService) GetClickTrackerByIDReturns(result1 *model.ClickTracker, result2 error) {
	fake.getClickTrackerByIDMutex.Lock()
	defer fake.getClickTrackerByIDMutex.Unlock()
	fake.GetClickTrackerByIDStub = nil
	fake.getClickTrackerByIDReturns = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakeClickTrackerService) GetClickTrackerByIDReturnsOnCall(i int, result1 *model.ClickTracker, result2 error) {
	fake.getClickTrackerByIDMutex.Lock()
	defer fake.getClickTrackerByIDMutex.Unlock()
	fake.GetClickTrackerByIDStub = nil
	if fake.getClickTrackerByIDReturnsOnCall == nil {
		fake.getClickTrackerByIDReturnsOnCall = make(map[int]struct {
			result1 *model.ClickTracker
			result2 error
		})
	}
	fake.getClickTrackerByIDReturnsOnCall[i] = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakeClickTrackerService) ListClickTrackers(arg1 context.Context, arg2 *model.ClickTrackerFilters) (*model.PaginatedClickTrackers, error) {
	fake.listClickTrackersMutex.Lock()
	ret, specificReturn := fake.listClickTrackersReturnsOnCall[len(fake.listClickTrackersArgsForCall)]
	fake.listClickTrackersArgsForCall = append(fake.listClickTrackersArgsForCall, struct {
		arg1 context.Context
		arg2 *model.ClickTrackerFilters
	}{arg1, arg2})
	stub := fake.ListClickTrackersStub
	fakeReturns := fake.listClickTrackersReturns
	fake.recordInvocation("ListClickTrackers", []interface{}{arg1, arg2})
	fake.listClickTrackersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClickTrackerService) ListClickTrackersCallCount() int {
	fake.listClickTrackersMutex.RLock()
	defer fake.listClickTrackersMutex.RUnlock()
	return len(fake.listClickTrackersArgsForCall)
}

func (fake *FakeClickTrackerService) ListClickTrackersCalls(stub func(context.Context, *model.ClickTrackerFilters) (*model.PaginatedClickTrackers, error)) {
	fake.listClickTrackersMutex.Lock()
	defer fake.listClickTrackersMutex.Unlock()
	fake.ListClickTrackersStub = stub
}

func (fake *FakeClickTrackerService) ListClickTrackersArgsForCall(i int) (context.Context, *model.ClickTrackerFilters) {
	fake.listClickTrackersMutex.RLock()
	defer fake.listClickTrackersMutex.RUnlock()
	argsForCall := fake.listClickTrackersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClickTrackerService) ListClickTrackersReturns(result1 *model.PaginatedClickTrackers, result2 error) {
	fake.listClickTrackersMutex.Lock()
	defer fake.listClickTrackersMutex.Unlock()
	fake.ListClickTrackersStub = nil
	fake.listClickTrackersReturns = struct {
		result1 *model.PaginatedClickTrackers
		result2 error
	}{result1, result2}
}

func (fake *FakeClickTrackerService) ListClickTrackersReturnsOnCall(i int, result1 *model.PaginatedClickTrackers, result2 error) {
	fake.listClickTrackersMutex.Lock()
	defer fake.listClickTrackersMutex.Unlock()
	fake.ListClickTrackersStub = nil
	if fake.listClickTrackersReturnsOnCall == nil {
		fake.listClickTrackersReturnsOnCall = make(map[int]struct {
			result1 *model.PaginatedClickTrackers
			result2 error
		})
	}
	fake.listClickTrackersReturnsOnCall[i] = struct {
		result1 *model.PaginatedClickTrackers
		result2 error
	}{result1, result2}
}

func (fake *FakeClickTrackerService) RestoreClickTracker(arg1 context.Context, arg2 *model.RestoreClickTracker) error {
	fake.restoreClickTrackerMutex.Lock()
	ret, specificReturn := fake.restoreClickTrackerReturnsOnCall[len(fake.restoreClickTrackerArgsForCall)]
	fake.restoreClickTrackerArgsForCall = append(fake.restoreClickTrackerArgsForCall, struct {
		arg1 context.Context
		arg2 *model.RestoreClickTracker
	}{arg1, arg2})
	stub := fake.RestoreClickTrackerStub
	fakeReturns := fake.restoreClickTrackerReturns
	fake.recordInvocation("RestoreClickTracker", []interface{}{arg1, arg2})
	fake.restoreClickTrackerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeClickTrackerService) RestoreClickTrackerCallCount() int {
	fake.restoreClickTrackerMutex.RLock()
	defer fake.restoreClickTrackerMutex.RUnlock()
	return len(fake.restoreClickTrackerArgsForCall)
}

func (fake *FakeClickTrackerService) RestoreClickTrackerCalls(stub func(context.Context, *model.RestoreClickTracker) error) {
	fake.restoreClickTrackerMutex.Lock()
	defer fake.restoreClickTrackerMutex.Unlock()
	fake.RestoreClickTrackerStub = stub
}

func (fake *FakeClickTrackerService) RestoreClickTrackerArgsForCall(i int) (context.Context, *model.RestoreClickTracker) {
	fake.restoreClickTrackerMutex.RLock()
	defer fake.restoreClickTrackerMutex.RUnlock()
	argsForCall := fake.restoreClickTrackerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClickTrackerService) RestoreClickTrackerReturns(result1 error) {
	fake.restoreClickTrackerMutex.Lock()
	defer fake.restoreClickTrackerMutex.Unlock()
	fake.RestoreClickTrackerStub = nil
	fake.restoreClickTrackerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeClickTrackerService) RestoreClickTrackerReturnsOnCall(i int, result1 error) {
	fake.restoreClickTrackerMutex.Lock()
	defer fake.restoreClickTrackerMutex.Unlock()
	fake.RestoreClickTrackerStub = nil
	if fake.restoreClickTrackerReturnsOnCall == nil {
		fake.restoreClickTrackerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.restoreClickTrackerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeClickTrackerService) UpdateClickTracker(arg1 context.Context, arg2 *model.UpdateClickTracker) (*model.ClickTracker, error) {
	fake.updateClickTrackerMutex.Lock()
	ret, specificReturn := fake.updateClickTrackerReturnsOnCall[len(fake.updateClickTrackerArgsForCall)]
	fake.updateClickTrackerArgsForCall = append(fake.updateClickTrackerArgsForCall, struct {
		arg1 context.Context
		arg2 *model.UpdateClickTracker
	}{arg1, arg2})
	stub := fake.UpdateClickTrackerStub
	fakeReturns := fake.updateClickTrackerReturns
	fake.recordInvocation("UpdateClickTracker", []interface{}{arg1, arg2})
	fake.updateClickTrackerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeClickTrackerService) UpdateClickTrackerCallCount() int {
	fake.updateClickTrackerMutex.RLock()
	defer fake.updateClickTrackerMutex.RUnlock()
	return len(fake.updateClickTrackerArgsForCall)
}

func (fake *FakeClickTrackerService) UpdateClickTrackerCalls(stub func(context.Context, *model.UpdateClickTracker) (*model.ClickTracker, error)) {
	fake.updateClickTrackerMutex.Lock()
	defer fake.updateClickTrackerMutex.Unlock()
	fake.UpdateClickTrackerStub = stub
}

func (fake *FakeClickTrackerService) UpdateClickTrackerArgsForCall(i int) (context.Context, *model.UpdateClickTracker) {
	fake.updateClickTrackerMutex.RLock()
	defer fake.updateClickTrackerMutex.RUnlock()
	argsForCall := fake.updateClickTrackerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClickTrackerService) UpdateClickTrackerReturns(result1 *model.ClickTracker, result2 error) {
	fake.updateClickTrackerMutex.Lock()
	defer fake.updateClickTrackerMutex.Unlock()
	fake.UpdateClickTrackerStub = nil
	fake.updateClickTrackerReturns = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakeClickTrackerService) UpdateClickTrackerReturnsOnCall(i int, result1 *model.ClickTracker, result2 error) {
	fake.updateClickTrackerMutex.Lock()
	defer fake.updateClickTrackerMutex.Unlock()
	fake.UpdateClickTrackerStub = nil
	if fake.updateClickTrackerReturnsOnCall == nil {
		fake.updateClickTrackerReturnsOnCall = make(map[int]struct {
			result1 *model.ClickTracker
			result2 error
		})
	}
	fake.updateClickTrackerReturnsOnCall[i] = struct {
		result1 *model.ClickTracker
		result2 error
	}{result1, result2}
}

func (fake *FakeClickTrackerService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createClickTrackerMutex.RLock()
	defer fake.createClickTrackerMutex.RUnlock()
	fake.deleteClickTrackerMutex.RLock()
	defer fake.deleteClickTrackerMutex.RUnlock()
	fake.getClickTrackerByIDMutex.RLock()
	defer fake.getClickTrackerByIDMutex.RUnlock()
	fake.listClickTrackersMutex.RLock()
	defer fake.listClickTrackersMutex.RUnlock()
	fake.restoreClickTrackerMutex.RLock()
	defer fake.restoreClickTrackerMutex.RUnlock()
	fake.updateClickTrackerMutex.RLock()
	defer fake.updateClickTrackerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClickTrackerService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
