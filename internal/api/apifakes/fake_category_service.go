// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"context"
	"sync"

	"github.com/dembygenesis/local.tools/internal/model"
)

type FakeCategoryService struct {
	CreateCategoryStub        func(context.Context, *model.CreateCategory) (*model.Category, error)
	createCategoryMutex       sync.RWMutex
	createCategoryArgsForCall []struct {
		arg1 context.Context
		arg2 *model.CreateCategory
	}
	createCategoryReturns struct {
		result1 *model.Category
		result2 error
	}
	createCategoryReturnsOnCall map[int]struct {
		result1 *model.Category
		result2 error
	}
	DeleteCategoryStub        func(context.Context, *model.DeleteCategory) error
	deleteCategoryMutex       sync.RWMutex
	deleteCategoryArgsForCall []struct {
		arg1 context.Context
		arg2 *model.DeleteCategory
	}
	deleteCategoryReturns struct {
		result1 error
	}
	deleteCategoryReturnsOnCall map[int]struct {
		result1 error
	}
	GetCategoryByIDStub        func(context.Context, int) (*model.Category, error)
	getCategoryByIDMutex       sync.RWMutex
	getCategoryByIDArgsForCall []struct {
		arg1 context.Context
		arg2 int
	}
	getCategoryByIDReturns struct {
		result1 *model.Category
		result2 error
	}
	getCategoryByIDReturnsOnCall map[int]struct {
		result1 *model.Category
		result2 error
	}
	ListCategoriesStub        func(context.Context, *model.CategoryFilters) (*model.PaginatedCategories, error)
	listCategoriesMutex       sync.RWMutex
	listCategoriesArgsForCall []struct {
		arg1 context.Context
		arg2 *model.CategoryFilters
	}
	listCategoriesReturns struct {
		result1 *model.PaginatedCategories
		result2 error
	}
	listCategoriesReturnsOnCall map[int]struct {
		result1 *model.PaginatedCategories
		result2 error
	}
	RestoreCategoryStub        func(context.Context, *model.RestoreCategory) error
	restoreCategoryMutex       sync.RWMutex
	restoreCategoryArgsForCall []struct {
		arg1 context.Context
		arg2 *model.RestoreCategory
	}
	restoreCategoryReturns struct {
		result1 error
	}
	restoreCategoryReturnsOnCall map[int]struct {
		result1 error
	}
	UpdateCategoryStub        func(context.Context, *model.UpdateCategory) (*model.Category, error)
	updateCategoryMutex       sync.RWMutex
	updateCategoryArgsForCall []struct {
		arg1 context.Context
		arg2 *model.UpdateCategory
	}
	updateCategoryReturns struct {
		result1 *model.Category
		result2 error
	}
	updateCategoryReturnsOnCall map[int]struct {
		result1 *model.Category
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCategoryService) CreateCategory(arg1 context.Context, arg2 *model.CreateCategory) (*model.Category, error) {
	fake.createCategoryMutex.Lock()
	ret, specificReturn := fake.createCategoryReturnsOnCall[len(fake.createCategoryArgsForCall)]
	fake.createCategoryArgsForCall = append(fake.createCategoryArgsForCall, struct {
		arg1 context.Context
		arg2 *model.CreateCategory
	}{arg1, arg2})
	stub := fake.CreateCategoryStub
	fakeReturns := fake.createCategoryReturns
	fake.recordInvocation("CreateCategory", []interface{}{arg1, arg2})
	fake.createCategoryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCategoryService) CreateCategoryCallCount() int {
	fake.createCategoryMutex.RLock()
	defer fake.createCategoryMutex.RUnlock()
	return len(fake.createCategoryArgsForCall)
}

func (fake *FakeCategoryService) CreateCategoryCalls(stub func(context.Context, *model.CreateCategory) (*model.Category, error)) {
	fake.createCategoryMutex.Lock()
	defer fake.createCategoryMutex.Unlock()
	fake.CreateCategoryStub = stub
}

func (fake *FakeCategoryService) CreateCategoryArgsForCall(i int) (context.Context, *model.CreateCategory) {
	fake.createCategoryMutex.RLock()
	defer fake.createCategoryMutex.RUnlock()
	argsForCall := fake.createCategoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCategoryService) CreateCategoryReturns(result1 *model.Category, result2 error) {
	fake.createCategoryMutex.Lock()
	defer fake.createCategoryMutex.Unlock()
	fake.CreateCategoryStub = nil
	fake.createCategoryReturns = struct {
		result1 *model.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeCategoryService) CreateCategoryReturnsOnCall(i int, result1 *model.Category, result2 error) {
	fake.createCategoryMutex.Lock()
	defer fake.createCategoryMutex.Unlock()
	fake.CreateCategoryStub = nil
	if fake.createCategoryReturnsOnCall == nil {
		fake.createCategoryReturnsOnCall = make(map[int]struct {
			result1 *model.Category
			result2 error
		})
	}
	fake.createCategoryReturnsOnCall[i] = struct {
		result1 *model.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeCategoryService) DeleteCategory(arg1 context.Context, arg2 *model.DeleteCategory) error {
	fake.deleteCategoryMutex.Lock()
	ret, specificReturn := fake.deleteCategoryReturnsOnCall[len(fake.deleteCategoryArgsForCall)]
	fake.deleteCategoryArgsForCall = append(fake.deleteCategoryArgsForCall, struct {
		arg1 context.Context
		arg2 *model.DeleteCategory
	}{arg1, arg2})
	stub := fake.DeleteCategoryStub
	fakeReturns := fake.deleteCategoryReturns
	fake.recordInvocation("DeleteCategory", []interface{}{arg1, arg2})
	fake.deleteCategoryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCategoryService) DeleteCategoryCallCount() int {
	fake.deleteCategoryMutex.RLock()
	defer fake.deleteCategoryMutex.RUnlock()
	return len(fake.deleteCategoryArgsForCall)
}

func (fake *FakeCategoryService) DeleteCategoryCalls(stub func(context.Context, *model.DeleteCategory) error) {
	fake.deleteCategoryMutex.Lock()
	defer fake.deleteCategoryMutex.Unlock()
	fake.DeleteCategoryStub = stub
}

func (fake *FakeCategoryService) DeleteCategoryArgsForCall(i int) (context.Context, *model.DeleteCategory) {
	fake.deleteCategoryMutex.RLock()
	defer fake.deleteCategoryMutex.RUnlock()
	argsForCall := fake.deleteCategoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCategoryService) DeleteCategoryReturns(result1 error) {
	fake.deleteCategoryMutex.Lock()
	defer fake.deleteCategoryMutex.Unlock()
	fake.DeleteCategoryStub = nil
	fake.deleteCategoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCategoryService) DeleteCategoryReturnsOnCall(i int, result1 error) {
	fake.deleteCategoryMutex.Lock()
	defer fake.deleteCategoryMutex.Unlock()
	fake.DeleteCategoryStub = nil
	if fake.deleteCategoryReturnsOnCall == nil {
		fake.deleteCategoryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteCategoryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCategoryService) GetCategoryByID(arg1 context.Context, arg2 int) (*model.Category, error) {
	fake.getCategoryByIDMutex.Lock()
	ret, specificReturn := fake.getCategoryByIDReturnsOnCall[len(fake.getCategoryByIDArgsForCall)]
	fake.getCategoryByIDArgsForCall = append(fake.getCategoryByIDArgsForCall, struct {
		arg1 context.Context
		arg2 int
	}{arg1, arg2})
	stub := fake.GetCategoryByIDStub
	fakeReturns := fake.getCategoryByIDReturns
	fake.recordInvocation("GetCategoryByID", []interface{}{arg1, arg2})
	fake.getCategoryByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCategoryService) GetCategoryByIDCallCount() int {
	fake.getCategoryByIDMutex.RLock()
	defer fake.getCategoryByIDMutex.RUnlock()
	return len(fake.getCategoryByIDArgsForCall)
}

func (fake *FakeCategoryService) GetCategoryByIDCalls(stub func(context.Context, int) (*model.Category, error)) {
	fake.getCategoryByIDMutex.Lock()
	defer fake.getCategoryByIDMutex.Unlock()
	fake.GetCategoryByIDStub = stub
}

func (fake *FakeCategoryService) GetCategoryByIDArgsForCall(i int) (context.Context, int) {
	fake.getCategoryByIDMutex.RLock()
	defer fake.getCategoryByIDMutex.RUnlock()
	argsForCall := fake.getCategoryByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCategoryService) GetCategoryByIDReturns(result1 *model.Category, result2 error) {
	fake.getCategoryByIDMutex.Lock()
	defer fake.getCategoryByIDMutex.Unlock()
	fake.GetCategoryByIDStub = nil
	fake.getCategoryByIDReturns = struct {
		result1 *model.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeCategoryService) GetCategoryByIDReturnsOnCall(i int, result1 *model.Category, result2 error) {
	fake.getCategoryByIDMutex.Lock()
	defer fake.getCategoryByIDMutex.Unlock()
	fake.GetCategoryByIDStub = nil
	if fake.getCategoryByIDReturnsOnCall == nil {
		fake.getCategoryByIDReturnsOnCall = make(map[int]struct {
			result1 *model.Category
			result2 error
		})
	}
	fake.getCategoryByIDReturnsOnCall[i] = struct {
		result1 *model.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeCategoryService) ListCategories(arg1 context.Context, arg2 *model.CategoryFilters) (*model.PaginatedCategories, error) {
	fake.listCategoriesMutex.Lock()
	ret, specificReturn := fake.listCategoriesReturnsOnCall[len(fake.listCategoriesArgsForCall)]
	fake.listCategoriesArgsForCall = append(fake.listCategoriesArgsForCall, struct {
		arg1 context.Context
		arg2 *model.CategoryFilters
	}{arg1, arg2})
	stub := fake.ListCategoriesStub
	fakeReturns := fake.listCategoriesReturns
	fake.recordInvocation("ListCategories", []interface{}{arg1, arg2})
	fake.listCategoriesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCategoryService) ListCategoriesCallCount() int {
	fake.listCategoriesMutex.RLock()
	defer fake.listCategoriesMutex.RUnlock()
	return len(fake.listCategoriesArgsForCall)
}

func (fake *FakeCategoryService) ListCategoriesCalls(stub func(context.Context, *model.CategoryFilters) (*model.PaginatedCategories, error)) {
	fake.listCategoriesMutex.Lock()
	defer fake.listCategoriesMutex.Unlock()
	fake.ListCategoriesStub = stub
}

func (fake *FakeCategoryService) ListCategoriesArgsForCall(i int) (context.Context, *model.CategoryFilters) {
	fake.listCategoriesMutex.RLock()
	defer fake.listCategoriesMutex.RUnlock()
	argsForCall := fake.listCategoriesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCategoryService) ListCategoriesReturns(result1 *model.PaginatedCategories, result2 error) {
	fake.listCategoriesMutex.Lock()
	defer fake.listCategoriesMutex.Unlock()
	fake.ListCategoriesStub = nil
	fake.listCategoriesReturns = struct {
		result1 *model.PaginatedCategories
		result2 error
	}{result1, result2}
}

func (fake *FakeCategoryService) ListCategoriesReturnsOnCall(i int, result1 *model.PaginatedCategories, result2 error) {
	fake.listCategoriesMutex.Lock()
	defer fake.listCategoriesMutex.Unlock()
	fake.ListCategoriesStub = nil
	if fake.listCategoriesReturnsOnCall == nil {
		fake.listCategoriesReturnsOnCall = make(map[int]struct {
			result1 *model.PaginatedCategories
			result2 error
		})
	}
	fake.listCategoriesReturnsOnCall[i] = struct {
		result1 *model.PaginatedCategories
		result2 error
	}{result1, result2}
}

func (fake *FakeCategoryService) RestoreCategory(arg1 context.Context, arg2 *model.RestoreCategory) error {
	fake.restoreCategoryMutex.Lock()
	ret, specificReturn := fake.restoreCategoryReturnsOnCall[len(fake.restoreCategoryArgsForCall)]
	fake.restoreCategoryArgsForCall = append(fake.restoreCategoryArgsForCall, struct {
		arg1 context.Context
		arg2 *model.RestoreCategory
	}{arg1, arg2})
	stub := fake.RestoreCategoryStub
	fakeReturns := fake.restoreCategoryReturns
	fake.recordInvocation("RestoreCategory", []interface{}{arg1, arg2})
	fake.restoreCategoryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCategoryService) RestoreCategoryCallCount() int {
	fake.restoreCategoryMutex.RLock()
	defer fake.restoreCategoryMutex.RUnlock()
	return len(fake.restoreCategoryArgsForCall)
}

func (fake *FakeCategoryService) RestoreCategoryCalls(stub func(context.Context, *model.RestoreCategory) error) {
	fake.restoreCategoryMutex.Lock()
	defer fake.restoreCategoryMutex.Unlock()
	fake.RestoreCategoryStub = stub
}

func (fake *FakeCategoryService) RestoreCategoryArgsForCall(i int) (context.Context, *model.RestoreCategory) {
	fake.restoreCategoryMutex.RLock()
	defer fake.restoreCategoryMutex.RUnlock()
	argsForCall := fake.restoreCategoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCategoryService) RestoreCategoryReturns(result1 error) {
	fake.restoreCategoryMutex.Lock()
	defer fake.restoreCategoryMutex.Unlock()
	fake.RestoreCategoryStub = nil
	fake.restoreCategoryReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCategoryService) RestoreCategoryReturnsOnCall(i int, result1 error) {
	fake.restoreCategoryMutex.Lock()
	defer fake.restoreCategoryMutex.Unlock()
	fake.RestoreCategoryStub = nil
	if fake.restoreCategoryReturnsOnCall == nil {
		fake.restoreCategoryReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.restoreCategoryReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCategoryService) UpdateCategory(arg1 context.Context, arg2 *model.UpdateCategory) (*model.Category, error) {
	fake.updateCategoryMutex.Lock()
	ret, specificReturn := fake.updateCategoryReturnsOnCall[len(fake.updateCategoryArgsForCall)]
	fake.updateCategoryArgsForCall = append(fake.updateCategoryArgsForCall, struct {
		arg1 context.Context
		arg2 *model.UpdateCategory
	}{arg1, arg2})
	stub := fake.UpdateCategoryStub
	fakeReturns := fake.updateCategoryReturns
	fake.recordInvocation("UpdateCategory", []interface{}{arg1, arg2})
	fake.updateCategoryMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCategoryService) UpdateCategoryCallCount() int {
	fake.updateCategoryMutex.RLock()
	defer fake.updateCategoryMutex.RUnlock()
	return len(fake.updateCategoryArgsForCall)
}

func (fake *FakeCategoryService) UpdateCategoryCalls(stub func(context.Context, *model.UpdateCategory) (*model.Category, error)) {
	fake.updateCategoryMutex.Lock()
	defer fake.updateCategoryMutex.Unlock()
	fake.UpdateCategoryStub = stub
}

func (fake *FakeCategoryService) UpdateCategoryArgsForCall(i int) (context.Context, *model.UpdateCategory) {
	fake.updateCategoryMutex.RLock()
	defer fake.updateCategoryMutex.RUnlock()
	argsForCall := fake.updateCategoryArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCategoryService) UpdateCategoryReturns(result1 *model.Category, result2 error) {
	fake.updateCategoryMutex.Lock()
	defer fake.updateCategoryMutex.Unlock()
	fake.UpdateCategoryStub = nil
	fake.updateCategoryReturns = struct {
		result1 *model.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeCategoryService) UpdateCategoryReturnsOnCall(i int, result1 *model.Category, result2 error) {
	fake.updateCategoryMutex.Lock()
	defer fake.updateCategoryMutex.Unlock()
	fake.UpdateCategoryStub = nil
	if fake.updateCategoryReturnsOnCall == nil {
		fake.updateCategoryReturnsOnCall = make(map[int]struct {
			result1 *model.Category
			result2 error
		})
	}
	fake.updateCategoryReturnsOnCall[i] = struct {
		result1 *model.Category
		result2 error
	}{result1, result2}
}

func (fake *FakeCategoryService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createCategoryMutex.RLock()
	defer fake.createCategoryMutex.RUnlock()
	fake.deleteCategoryMutex.RLock()
	defer fake.deleteCategoryMutex.RUnlock()
	fake.getCategoryByIDMutex.RLock()
	defer fake.getCategoryByIDMutex.RUnlock()
	fake.listCategoriesMutex.RLock()
	defer fake.listCategoriesMutex.RUnlock()
	fake.restoreCategoryMutex.RLock()
	defer fake.restoreCategoryMutex.RUnlock()
	fake.updateCategoryMutex.RLock()
	defer fake.updateCategoryMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCategoryService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
