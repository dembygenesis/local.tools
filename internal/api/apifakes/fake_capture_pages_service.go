// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"context"
	"sync"

	"github.com/dembygenesis/local.tools/internal/model"
)

type FakeCapturePagesService struct {
	ListCapturePagesStub        func(context.Context, *model.CapturePagesFilters) (*model.PaginatedCapturePages, error)
	listCapturePagesMutex       sync.RWMutex
	listCapturePagesArgsForCall []struct {
		arg1 context.Context
		arg2 *model.CapturePagesFilters
	}
	listCapturePagesReturns struct {
		result1 *model.PaginatedCapturePages
		result2 error
	}
	listCapturePagesReturnsOnCall map[int]struct {
		result1 *model.PaginatedCapturePages
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCapturePagesService) ListCapturePages(arg1 context.Context, arg2 *model.CapturePagesFilters) (*model.PaginatedCapturePages, error) {
	fake.listCapturePagesMutex.Lock()
	ret, specificReturn := fake.listCapturePagesReturnsOnCall[len(fake.listCapturePagesArgsForCall)]
	fake.listCapturePagesArgsForCall = append(fake.listCapturePagesArgsForCall, struct {
		arg1 context.Context
		arg2 *model.CapturePagesFilters
	}{arg1, arg2})
	stub := fake.ListCapturePagesStub
	fakeReturns := fake.listCapturePagesReturns
	fake.recordInvocation("ListCapturePages", []interface{}{arg1, arg2})
	fake.listCapturePagesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCapturePagesService) ListCapturePagesCallCount() int {
	fake.listCapturePagesMutex.RLock()
	defer fake.listCapturePagesMutex.RUnlock()
	return len(fake.listCapturePagesArgsForCall)
}

func (fake *FakeCapturePagesService) ListCapturePagesCalls(stub func(context.Context, *model.CapturePagesFilters) (*model.PaginatedCapturePages, error)) {
	fake.listCapturePagesMutex.Lock()
	defer fake.listCapturePagesMutex.Unlock()
	fake.ListCapturePagesStub = stub
}

func (fake *FakeCapturePagesService) ListCapturePagesArgsForCall(i int) (context.Context, *model.CapturePagesFilters) {
	fake.listCapturePagesMutex.RLock()
	defer fake.listCapturePagesMutex.RUnlock()
	argsForCall := fake.listCapturePagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCapturePagesService) ListCapturePagesReturns(result1 *model.PaginatedCapturePages, result2 error) {
	fake.listCapturePagesMutex.Lock()
	defer fake.listCapturePagesMutex.Unlock()
	fake.ListCapturePagesStub = nil
	fake.listCapturePagesReturns = struct {
		result1 *model.PaginatedCapturePages
		result2 error
	}{result1, result2}
}

func (fake *FakeCapturePagesService) ListCapturePagesReturnsOnCall(i int, result1 *model.PaginatedCapturePages, result2 error) {
	fake.listCapturePagesMutex.Lock()
	defer fake.listCapturePagesMutex.Unlock()
	fake.ListCapturePagesStub = nil
	if fake.listCapturePagesReturnsOnCall == nil {
		fake.listCapturePagesReturnsOnCall = make(map[int]struct {
			result1 *model.PaginatedCapturePages
			result2 error
		})
	}
	fake.listCapturePagesReturnsOnCall[i] = struct {
		result1 *model.PaginatedCapturePages
		result2 error
	}{result1, result2}
}

func (fake *FakeCapturePagesService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listCapturePagesMutex.RLock()
	defer fake.listCapturePagesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCapturePagesService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
